/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: s2clientprotocol/sc2api.proto */

#ifndef PROTOBUF_C_s2clientprotocol_2fsc2api_2eproto__INCLUDED
#define PROTOBUF_C_s2clientprotocol_2fsc2api_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "s2clientprotocol/common.pb-c.h"
#include "s2clientprotocol/data.pb-c.h"
#include "s2clientprotocol/debug.pb-c.h"
#include "s2clientprotocol/error.pb-c.h"
#include "s2clientprotocol/query.pb-c.h"
#include "s2clientprotocol/raw.pb-c.h"
#include "s2clientprotocol/score.pb-c.h"
#include "s2clientprotocol/spatial.pb-c.h"
#include "s2clientprotocol/ui.pb-c.h"

typedef struct _SC2APIProtocol__Request SC2APIProtocol__Request;
typedef struct _SC2APIProtocol__Response SC2APIProtocol__Response;
typedef struct _SC2APIProtocol__RequestCreateGame SC2APIProtocol__RequestCreateGame;
typedef struct _SC2APIProtocol__LocalMap SC2APIProtocol__LocalMap;
typedef struct _SC2APIProtocol__ResponseCreateGame SC2APIProtocol__ResponseCreateGame;
typedef struct _SC2APIProtocol__RequestJoinGame SC2APIProtocol__RequestJoinGame;
typedef struct _SC2APIProtocol__PortSet SC2APIProtocol__PortSet;
typedef struct _SC2APIProtocol__ResponseJoinGame SC2APIProtocol__ResponseJoinGame;
typedef struct _SC2APIProtocol__RequestRestartGame SC2APIProtocol__RequestRestartGame;
typedef struct _SC2APIProtocol__ResponseRestartGame SC2APIProtocol__ResponseRestartGame;
typedef struct _SC2APIProtocol__RequestStartReplay SC2APIProtocol__RequestStartReplay;
typedef struct _SC2APIProtocol__ResponseStartReplay SC2APIProtocol__ResponseStartReplay;
typedef struct _SC2APIProtocol__RequestMapCommand SC2APIProtocol__RequestMapCommand;
typedef struct _SC2APIProtocol__ResponseMapCommand SC2APIProtocol__ResponseMapCommand;
typedef struct _SC2APIProtocol__RequestLeaveGame SC2APIProtocol__RequestLeaveGame;
typedef struct _SC2APIProtocol__ResponseLeaveGame SC2APIProtocol__ResponseLeaveGame;
typedef struct _SC2APIProtocol__RequestQuickSave SC2APIProtocol__RequestQuickSave;
typedef struct _SC2APIProtocol__ResponseQuickSave SC2APIProtocol__ResponseQuickSave;
typedef struct _SC2APIProtocol__RequestQuickLoad SC2APIProtocol__RequestQuickLoad;
typedef struct _SC2APIProtocol__ResponseQuickLoad SC2APIProtocol__ResponseQuickLoad;
typedef struct _SC2APIProtocol__RequestQuit SC2APIProtocol__RequestQuit;
typedef struct _SC2APIProtocol__ResponseQuit SC2APIProtocol__ResponseQuit;
typedef struct _SC2APIProtocol__RequestGameInfo SC2APIProtocol__RequestGameInfo;
typedef struct _SC2APIProtocol__ResponseGameInfo SC2APIProtocol__ResponseGameInfo;
typedef struct _SC2APIProtocol__RequestObservation SC2APIProtocol__RequestObservation;
typedef struct _SC2APIProtocol__ResponseObservation SC2APIProtocol__ResponseObservation;
typedef struct _SC2APIProtocol__ChatReceived SC2APIProtocol__ChatReceived;
typedef struct _SC2APIProtocol__RequestAction SC2APIProtocol__RequestAction;
typedef struct _SC2APIProtocol__ResponseAction SC2APIProtocol__ResponseAction;
typedef struct _SC2APIProtocol__RequestObserverAction SC2APIProtocol__RequestObserverAction;
typedef struct _SC2APIProtocol__ResponseObserverAction SC2APIProtocol__ResponseObserverAction;
typedef struct _SC2APIProtocol__RequestStep SC2APIProtocol__RequestStep;
typedef struct _SC2APIProtocol__ResponseStep SC2APIProtocol__ResponseStep;
typedef struct _SC2APIProtocol__RequestData SC2APIProtocol__RequestData;
typedef struct _SC2APIProtocol__ResponseData SC2APIProtocol__ResponseData;
typedef struct _SC2APIProtocol__RequestSaveReplay SC2APIProtocol__RequestSaveReplay;
typedef struct _SC2APIProtocol__ResponseSaveReplay SC2APIProtocol__ResponseSaveReplay;
typedef struct _SC2APIProtocol__RequestReplayInfo SC2APIProtocol__RequestReplayInfo;
typedef struct _SC2APIProtocol__PlayerInfoExtra SC2APIProtocol__PlayerInfoExtra;
typedef struct _SC2APIProtocol__ResponseReplayInfo SC2APIProtocol__ResponseReplayInfo;
typedef struct _SC2APIProtocol__RequestAvailableMaps SC2APIProtocol__RequestAvailableMaps;
typedef struct _SC2APIProtocol__ResponseAvailableMaps SC2APIProtocol__ResponseAvailableMaps;
typedef struct _SC2APIProtocol__RequestSaveMap SC2APIProtocol__RequestSaveMap;
typedef struct _SC2APIProtocol__ResponseSaveMap SC2APIProtocol__ResponseSaveMap;
typedef struct _SC2APIProtocol__RequestPing SC2APIProtocol__RequestPing;
typedef struct _SC2APIProtocol__ResponsePing SC2APIProtocol__ResponsePing;
typedef struct _SC2APIProtocol__RequestDebug SC2APIProtocol__RequestDebug;
typedef struct _SC2APIProtocol__ResponseDebug SC2APIProtocol__ResponseDebug;
typedef struct _SC2APIProtocol__PlayerSetup SC2APIProtocol__PlayerSetup;
typedef struct _SC2APIProtocol__SpatialCameraSetup SC2APIProtocol__SpatialCameraSetup;
typedef struct _SC2APIProtocol__InterfaceOptions SC2APIProtocol__InterfaceOptions;
typedef struct _SC2APIProtocol__PlayerInfo SC2APIProtocol__PlayerInfo;
typedef struct _SC2APIProtocol__PlayerCommon SC2APIProtocol__PlayerCommon;
typedef struct _SC2APIProtocol__Observation SC2APIProtocol__Observation;
typedef struct _SC2APIProtocol__Action SC2APIProtocol__Action;
typedef struct _SC2APIProtocol__ActionChat SC2APIProtocol__ActionChat;
typedef struct _SC2APIProtocol__ActionError SC2APIProtocol__ActionError;
typedef struct _SC2APIProtocol__ObserverAction SC2APIProtocol__ObserverAction;
typedef struct _SC2APIProtocol__ActionObserverPlayerPerspective SC2APIProtocol__ActionObserverPlayerPerspective;
typedef struct _SC2APIProtocol__ActionObserverCameraMove SC2APIProtocol__ActionObserverCameraMove;
typedef struct _SC2APIProtocol__ActionObserverCameraFollowPlayer SC2APIProtocol__ActionObserverCameraFollowPlayer;
typedef struct _SC2APIProtocol__ActionObserverCameraFollowUnits SC2APIProtocol__ActionObserverCameraFollowUnits;
typedef struct _SC2APIProtocol__PlayerResult SC2APIProtocol__PlayerResult;


/* --- enums --- */

typedef enum _SC2APIProtocol__ResponseCreateGame__Error {
  SC2_APIPROTOCOL__RESPONSE_CREATE_GAME__ERROR__MissingMap = 1,
  SC2_APIPROTOCOL__RESPONSE_CREATE_GAME__ERROR__InvalidMapPath = 2,
  SC2_APIPROTOCOL__RESPONSE_CREATE_GAME__ERROR__InvalidMapData = 3,
  SC2_APIPROTOCOL__RESPONSE_CREATE_GAME__ERROR__InvalidMapName = 4,
  SC2_APIPROTOCOL__RESPONSE_CREATE_GAME__ERROR__InvalidMapHandle = 5,
  SC2_APIPROTOCOL__RESPONSE_CREATE_GAME__ERROR__MissingPlayerSetup = 6,
  SC2_APIPROTOCOL__RESPONSE_CREATE_GAME__ERROR__InvalidPlayerSetup = 7,
  /*
   * Multiplayer is not supported in the current build.
   */
  SC2_APIPROTOCOL__RESPONSE_CREATE_GAME__ERROR__MultiplayerUnsupported = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SC2_APIPROTOCOL__RESPONSE_CREATE_GAME__ERROR)
} SC2APIProtocol__ResponseCreateGame__Error;
typedef enum _SC2APIProtocol__ResponseJoinGame__Error {
  SC2_APIPROTOCOL__RESPONSE_JOIN_GAME__ERROR__MissingParticipation = 1,
  SC2_APIPROTOCOL__RESPONSE_JOIN_GAME__ERROR__InvalidObservedPlayerId = 2,
  SC2_APIPROTOCOL__RESPONSE_JOIN_GAME__ERROR__MissingOptions = 3,
  SC2_APIPROTOCOL__RESPONSE_JOIN_GAME__ERROR__MissingPorts = 4,
  SC2_APIPROTOCOL__RESPONSE_JOIN_GAME__ERROR__GameFull = 5,
  SC2_APIPROTOCOL__RESPONSE_JOIN_GAME__ERROR__LaunchError = 6,
  /*
   * Multiplayer specific.
   */
  /*
   * Multiplayer is not supported in the current build for the requested features.
   */
  SC2_APIPROTOCOL__RESPONSE_JOIN_GAME__ERROR__FeatureUnsupported = 7,
  SC2_APIPROTOCOL__RESPONSE_JOIN_GAME__ERROR__NoSpaceForUser = 8,
  SC2_APIPROTOCOL__RESPONSE_JOIN_GAME__ERROR__MapDoesNotExist = 9,
  SC2_APIPROTOCOL__RESPONSE_JOIN_GAME__ERROR__CannotOpenMap = 10,
  SC2_APIPROTOCOL__RESPONSE_JOIN_GAME__ERROR__ChecksumError = 11,
  SC2_APIPROTOCOL__RESPONSE_JOIN_GAME__ERROR__NetworkError = 12,
  SC2_APIPROTOCOL__RESPONSE_JOIN_GAME__ERROR__OtherError = 13
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SC2_APIPROTOCOL__RESPONSE_JOIN_GAME__ERROR)
} SC2APIProtocol__ResponseJoinGame__Error;
typedef enum _SC2APIProtocol__ResponseRestartGame__Error {
  SC2_APIPROTOCOL__RESPONSE_RESTART_GAME__ERROR__LaunchError = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SC2_APIPROTOCOL__RESPONSE_RESTART_GAME__ERROR)
} SC2APIProtocol__ResponseRestartGame__Error;
typedef enum _SC2APIProtocol__ResponseStartReplay__Error {
  SC2_APIPROTOCOL__RESPONSE_START_REPLAY__ERROR__MissingReplay = 1,
  SC2_APIPROTOCOL__RESPONSE_START_REPLAY__ERROR__InvalidReplayPath = 2,
  SC2_APIPROTOCOL__RESPONSE_START_REPLAY__ERROR__InvalidReplayData = 3,
  SC2_APIPROTOCOL__RESPONSE_START_REPLAY__ERROR__InvalidMapData = 4,
  SC2_APIPROTOCOL__RESPONSE_START_REPLAY__ERROR__InvalidObservedPlayerId = 5,
  SC2_APIPROTOCOL__RESPONSE_START_REPLAY__ERROR__MissingOptions = 6,
  SC2_APIPROTOCOL__RESPONSE_START_REPLAY__ERROR__LaunchError = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SC2_APIPROTOCOL__RESPONSE_START_REPLAY__ERROR)
} SC2APIProtocol__ResponseStartReplay__Error;
typedef enum _SC2APIProtocol__ResponseMapCommand__Error {
  SC2_APIPROTOCOL__RESPONSE_MAP_COMMAND__ERROR__NoTriggerError = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SC2_APIPROTOCOL__RESPONSE_MAP_COMMAND__ERROR)
} SC2APIProtocol__ResponseMapCommand__Error;
typedef enum _SC2APIProtocol__ResponseReplayInfo__Error {
  SC2_APIPROTOCOL__RESPONSE_REPLAY_INFO__ERROR__MissingReplay = 1,
  SC2_APIPROTOCOL__RESPONSE_REPLAY_INFO__ERROR__InvalidReplayPath = 2,
  SC2_APIPROTOCOL__RESPONSE_REPLAY_INFO__ERROR__InvalidReplayData = 3,
  SC2_APIPROTOCOL__RESPONSE_REPLAY_INFO__ERROR__ParsingError = 4,
  SC2_APIPROTOCOL__RESPONSE_REPLAY_INFO__ERROR__DownloadError = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SC2_APIPROTOCOL__RESPONSE_REPLAY_INFO__ERROR)
} SC2APIProtocol__ResponseReplayInfo__Error;
typedef enum _SC2APIProtocol__ResponseSaveMap__Error {
  SC2_APIPROTOCOL__RESPONSE_SAVE_MAP__ERROR__InvalidMapData = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SC2_APIPROTOCOL__RESPONSE_SAVE_MAP__ERROR)
} SC2APIProtocol__ResponseSaveMap__Error;
typedef enum _SC2APIProtocol__ActionChat__Channel {
  SC2_APIPROTOCOL__ACTION_CHAT__CHANNEL__Broadcast = 1,
  SC2_APIPROTOCOL__ACTION_CHAT__CHANNEL__Team = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SC2_APIPROTOCOL__ACTION_CHAT__CHANNEL)
} SC2APIProtocol__ActionChat__Channel;
typedef enum _SC2APIProtocol__Status {
  /*
   * Game has been launch and is not yet doing anything.
   */
  SC2_APIPROTOCOL__STATUS__launched = 1,
  /*
   * Create game has been called, and the host is awaiting players.
   */
  SC2_APIPROTOCOL__STATUS__init_game = 2,
  /*
   * In a single or multiplayer game.
   */
  SC2_APIPROTOCOL__STATUS__in_game = 3,
  /*
   * In a replay.
   */
  SC2_APIPROTOCOL__STATUS__in_replay = 4,
  /*
   * Game has ended, can still request game info, but ready for a new game.
   */
  SC2_APIPROTOCOL__STATUS__ended = 5,
  /*
   * Application is shutting down.
   */
  SC2_APIPROTOCOL__STATUS__quit = 6,
  /*
   * Should not happen, but indicates an error if it occurs.
   */
  SC2_APIPROTOCOL__STATUS__unknown = 99
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SC2_APIPROTOCOL__STATUS)
} SC2APIProtocol__Status;
typedef enum _SC2APIProtocol__Difficulty {
  SC2_APIPROTOCOL__DIFFICULTY__VeryEasy = 1,
  SC2_APIPROTOCOL__DIFFICULTY__Easy = 2,
  SC2_APIPROTOCOL__DIFFICULTY__Medium = 3,
  SC2_APIPROTOCOL__DIFFICULTY__MediumHard = 4,
  SC2_APIPROTOCOL__DIFFICULTY__Hard = 5,
  SC2_APIPROTOCOL__DIFFICULTY__Harder = 6,
  SC2_APIPROTOCOL__DIFFICULTY__VeryHard = 7,
  SC2_APIPROTOCOL__DIFFICULTY__CheatVision = 8,
  SC2_APIPROTOCOL__DIFFICULTY__CheatMoney = 9,
  SC2_APIPROTOCOL__DIFFICULTY__CheatInsane = 10
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SC2_APIPROTOCOL__DIFFICULTY)
} SC2APIProtocol__Difficulty;
typedef enum _SC2APIProtocol__PlayerType {
  SC2_APIPROTOCOL__PLAYER_TYPE__Participant = 1,
  SC2_APIPROTOCOL__PLAYER_TYPE__Computer = 2,
  SC2_APIPROTOCOL__PLAYER_TYPE__Observer = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SC2_APIPROTOCOL__PLAYER_TYPE)
} SC2APIProtocol__PlayerType;
typedef enum _SC2APIProtocol__AIBuild {
  SC2_APIPROTOCOL__AIBUILD__RandomBuild = 1,
  SC2_APIPROTOCOL__AIBUILD__Rush = 2,
  SC2_APIPROTOCOL__AIBUILD__Timing = 3,
  SC2_APIPROTOCOL__AIBUILD__Power = 4,
  SC2_APIPROTOCOL__AIBUILD__Macro = 5,
  SC2_APIPROTOCOL__AIBUILD__Air = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SC2_APIPROTOCOL__AIBUILD)
} SC2APIProtocol__AIBuild;
typedef enum _SC2APIProtocol__Alert {
  SC2_APIPROTOCOL__ALERT__AlertError = 3,
  SC2_APIPROTOCOL__ALERT__AddOnComplete = 4,
  SC2_APIPROTOCOL__ALERT__BuildingComplete = 5,
  SC2_APIPROTOCOL__ALERT__BuildingUnderAttack = 6,
  SC2_APIPROTOCOL__ALERT__LarvaHatched = 7,
  SC2_APIPROTOCOL__ALERT__MergeComplete = 8,
  SC2_APIPROTOCOL__ALERT__MineralsExhausted = 9,
  SC2_APIPROTOCOL__ALERT__MorphComplete = 10,
  SC2_APIPROTOCOL__ALERT__MothershipComplete = 11,
  SC2_APIPROTOCOL__ALERT__MULEExpired = 12,
  SC2_APIPROTOCOL__ALERT__NuclearLaunchDetected = 1,
  SC2_APIPROTOCOL__ALERT__NukeComplete = 13,
  SC2_APIPROTOCOL__ALERT__NydusWormDetected = 2,
  SC2_APIPROTOCOL__ALERT__ResearchComplete = 14,
  SC2_APIPROTOCOL__ALERT__TrainError = 15,
  SC2_APIPROTOCOL__ALERT__TrainUnitComplete = 16,
  SC2_APIPROTOCOL__ALERT__TrainWorkerComplete = 17,
  SC2_APIPROTOCOL__ALERT__TransformationComplete = 18,
  SC2_APIPROTOCOL__ALERT__UnitUnderAttack = 19,
  SC2_APIPROTOCOL__ALERT__UpgradeComplete = 20,
  SC2_APIPROTOCOL__ALERT__VespeneExhausted = 21,
  SC2_APIPROTOCOL__ALERT__WarpInComplete = 22
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SC2_APIPROTOCOL__ALERT)
} SC2APIProtocol__Alert;
typedef enum _SC2APIProtocol__Result {
  SC2_APIPROTOCOL__RESULT__Victory = 1,
  SC2_APIPROTOCOL__RESULT__Defeat = 2,
  SC2_APIPROTOCOL__RESULT__Tie = 3,
  SC2_APIPROTOCOL__RESULT__Undecided = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SC2_APIPROTOCOL__RESULT)
} SC2APIProtocol__Result;

/* --- messages --- */

typedef enum {
  SC2_APIPROTOCOL__REQUEST__REQUEST__NOT_SET = 0,
  SC2_APIPROTOCOL__REQUEST__REQUEST_CREATE_GAME = 1,
  SC2_APIPROTOCOL__REQUEST__REQUEST_JOIN_GAME = 2,
  SC2_APIPROTOCOL__REQUEST__REQUEST_RESTART_GAME = 3,
  SC2_APIPROTOCOL__REQUEST__REQUEST_START_REPLAY = 4,
  SC2_APIPROTOCOL__REQUEST__REQUEST_LEAVE_GAME = 5,
  SC2_APIPROTOCOL__REQUEST__REQUEST_QUICK_SAVE = 6,
  SC2_APIPROTOCOL__REQUEST__REQUEST_QUICK_LOAD = 7,
  SC2_APIPROTOCOL__REQUEST__REQUEST_QUIT = 8,
  SC2_APIPROTOCOL__REQUEST__REQUEST_GAME_INFO = 9,
  SC2_APIPROTOCOL__REQUEST__REQUEST_OBSERVATION = 10,
  SC2_APIPROTOCOL__REQUEST__REQUEST_ACTION = 11,
  SC2_APIPROTOCOL__REQUEST__REQUEST_OBS_ACTION = 21,
  SC2_APIPROTOCOL__REQUEST__REQUEST_STEP = 12,
  SC2_APIPROTOCOL__REQUEST__REQUEST_DATA = 13,
  SC2_APIPROTOCOL__REQUEST__REQUEST_QUERY = 14,
  SC2_APIPROTOCOL__REQUEST__REQUEST_SAVE_REPLAY = 15,
  SC2_APIPROTOCOL__REQUEST__REQUEST_MAP_COMMAND = 22,
  SC2_APIPROTOCOL__REQUEST__REQUEST_REPLAY_INFO = 16,
  SC2_APIPROTOCOL__REQUEST__REQUEST_AVAILABLE_MAPS = 17,
  SC2_APIPROTOCOL__REQUEST__REQUEST_SAVE_MAP = 18,
  SC2_APIPROTOCOL__REQUEST__REQUEST_PING = 19,
  SC2_APIPROTOCOL__REQUEST__REQUEST_DEBUG = 20
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SC2_APIPROTOCOL__REQUEST__REQUEST)
} SC2APIProtocol__Request__RequestCase;

struct  _SC2APIProtocol__Request
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint32_t id;
  SC2APIProtocol__Request__RequestCase request_case;
  union {
    /*
     * Game Setup
     */
    /*
     * Send to host to initialize game.
     */
    SC2APIProtocol__RequestCreateGame *create_game;
    /*
     * Send to host and all clients for game to begin.
     */
    SC2APIProtocol__RequestJoinGame *join_game;
    /*
     * Single player only. Reinitializes the game with the same player setup.
     */
    SC2APIProtocol__RequestRestartGame *restart_game;
    /*
     * Start playing a replay.
     */
    SC2APIProtocol__RequestStartReplay *start_replay;
    /*
     * Multiplayer only. Disconnects from a multiplayer game, equivalent to surrender.
     */
    SC2APIProtocol__RequestLeaveGame *leave_game;
    /*
     * Saves game to an in-memory bookmark.
     */
    SC2APIProtocol__RequestQuickSave *quick_save;
    /*
     * Loads from an in-memory bookmark.
     */
    SC2APIProtocol__RequestQuickLoad *quick_load;
    /*
     * Terminates the application.
     */
    SC2APIProtocol__RequestQuit *quit;
    /*
     * During Game
     */
    /*
     * Static data about the current game and map.
     */
    SC2APIProtocol__RequestGameInfo *game_info;
    /*
     * Snapshot of the current game state.
     */
    SC2APIProtocol__RequestObservation *observation;
    /*
     * Executes an action for a participant.
     */
    SC2APIProtocol__RequestAction *action;
    /*
     * Executes an action for an observer.
     */
    SC2APIProtocol__RequestObserverAction *obs_action;
    /*
     * Advances the game simulation.
     */
    SC2APIProtocol__RequestStep *step;
    /*
     * Data about different gameplay elements. May be different for different games.
     */
    SC2APIProtocol__RequestData *data;
    /*
     * Additional methods for inspecting game state.
     */
    SC2APIProtocol__RequestQuery *query;
    /*
     * Generates a replay.
     */
    SC2APIProtocol__RequestSaveReplay *save_replay;
    /*
     * Execute a particular trigger through a string interface
     */
    SC2APIProtocol__RequestMapCommand *map_command;
    /*
     * Other.
     */
    /*
     * Returns metadata about a replay file. Does not load the replay.
     */
    SC2APIProtocol__RequestReplayInfo *replay_info;
    /*
     * Returns directory of maps that can be played on.
     */
    SC2APIProtocol__RequestAvailableMaps *available_maps;
    /*
     * Saves binary map data to the local temp directory.
     */
    SC2APIProtocol__RequestSaveMap *save_map;
    /*
     * Debugging
     */
    /*
     * Network ping for testing connection.
     */
    SC2APIProtocol__RequestPing *ping;
    /*
     * Display debug information and execute debug actions.
     */
    SC2APIProtocol__RequestDebug *debug;
  };
};
#define SC2_APIPROTOCOL__REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__request__descriptor) \
    , 0, 0, SC2_APIPROTOCOL__REQUEST__REQUEST__NOT_SET, {0} }


typedef enum {
  SC2_APIPROTOCOL__RESPONSE__RESPONSE__NOT_SET = 0,
  SC2_APIPROTOCOL__RESPONSE__RESPONSE_CREATE_GAME = 1,
  SC2_APIPROTOCOL__RESPONSE__RESPONSE_JOIN_GAME = 2,
  SC2_APIPROTOCOL__RESPONSE__RESPONSE_RESTART_GAME = 3,
  SC2_APIPROTOCOL__RESPONSE__RESPONSE_START_REPLAY = 4,
  SC2_APIPROTOCOL__RESPONSE__RESPONSE_LEAVE_GAME = 5,
  SC2_APIPROTOCOL__RESPONSE__RESPONSE_QUICK_SAVE = 6,
  SC2_APIPROTOCOL__RESPONSE__RESPONSE_QUICK_LOAD = 7,
  SC2_APIPROTOCOL__RESPONSE__RESPONSE_QUIT = 8,
  SC2_APIPROTOCOL__RESPONSE__RESPONSE_GAME_INFO = 9,
  SC2_APIPROTOCOL__RESPONSE__RESPONSE_OBSERVATION = 10,
  SC2_APIPROTOCOL__RESPONSE__RESPONSE_ACTION = 11,
  SC2_APIPROTOCOL__RESPONSE__RESPONSE_OBS_ACTION = 21,
  SC2_APIPROTOCOL__RESPONSE__RESPONSE_STEP = 12,
  SC2_APIPROTOCOL__RESPONSE__RESPONSE_DATA = 13,
  SC2_APIPROTOCOL__RESPONSE__RESPONSE_QUERY = 14,
  SC2_APIPROTOCOL__RESPONSE__RESPONSE_SAVE_REPLAY = 15,
  SC2_APIPROTOCOL__RESPONSE__RESPONSE_REPLAY_INFO = 16,
  SC2_APIPROTOCOL__RESPONSE__RESPONSE_AVAILABLE_MAPS = 17,
  SC2_APIPROTOCOL__RESPONSE__RESPONSE_SAVE_MAP = 18,
  SC2_APIPROTOCOL__RESPONSE__RESPONSE_MAP_COMMAND = 22,
  SC2_APIPROTOCOL__RESPONSE__RESPONSE_PING = 19,
  SC2_APIPROTOCOL__RESPONSE__RESPONSE_DEBUG = 20
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SC2_APIPROTOCOL__RESPONSE__RESPONSE)
} SC2APIProtocol__Response__ResponseCase;

struct  _SC2APIProtocol__Response
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint32_t id;
  /*
   * If command is missing, this will contain the error. Otherwise this will contain any warnings.
   */
  size_t n_error;
  char **error;
  /*
   * Should be sent back with all responses.
   */
  protobuf_c_boolean has_status;
  SC2APIProtocol__Status status;
  SC2APIProtocol__Response__ResponseCase response_case;
  union {
    SC2APIProtocol__ResponseCreateGame *create_game;
    SC2APIProtocol__ResponseJoinGame *join_game;
    SC2APIProtocol__ResponseRestartGame *restart_game;
    SC2APIProtocol__ResponseStartReplay *start_replay;
    SC2APIProtocol__ResponseLeaveGame *leave_game;
    SC2APIProtocol__ResponseQuickSave *quick_save;
    SC2APIProtocol__ResponseQuickLoad *quick_load;
    SC2APIProtocol__ResponseQuit *quit;
    SC2APIProtocol__ResponseGameInfo *game_info;
    SC2APIProtocol__ResponseObservation *observation;
    SC2APIProtocol__ResponseAction *action;
    SC2APIProtocol__ResponseObserverAction *obs_action;
    SC2APIProtocol__ResponseStep *step;
    SC2APIProtocol__ResponseData *data;
    SC2APIProtocol__ResponseQuery *query;
    SC2APIProtocol__ResponseSaveReplay *save_replay;
    SC2APIProtocol__ResponseReplayInfo *replay_info;
    SC2APIProtocol__ResponseAvailableMaps *available_maps;
    SC2APIProtocol__ResponseSaveMap *save_map;
    SC2APIProtocol__ResponseMapCommand *map_command;
    /*
     * Debugging
     */
    SC2APIProtocol__ResponsePing *ping;
    SC2APIProtocol__ResponseDebug *debug;
  };
};
#define SC2_APIPROTOCOL__RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__response__descriptor) \
    , 0, 0, 0,NULL, 0, SC2_APIPROTOCOL__STATUS__launched, SC2_APIPROTOCOL__RESPONSE__RESPONSE__NOT_SET, {0} }


typedef enum {
  SC2_APIPROTOCOL__REQUEST_CREATE_GAME__MAP__NOT_SET = 0,
  SC2_APIPROTOCOL__REQUEST_CREATE_GAME__MAP_LOCAL_MAP = 1,
  SC2_APIPROTOCOL__REQUEST_CREATE_GAME__MAP_BATTLENET_MAP_NAME = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SC2_APIPROTOCOL__REQUEST_CREATE_GAME__MAP)
} SC2APIProtocol__RequestCreateGame__MapCase;

/*
 *-----------------------------------------------------------------------------
 * If successful, puts the game into the status: init_game.
 * The next expected request should be RequestJoinGame. Can also quit (exit).
 */
struct  _SC2APIProtocol__RequestCreateGame
{
  ProtobufCMessage base;
  size_t n_player_setup;
  SC2APIProtocol__PlayerSetup **player_setup;
  protobuf_c_boolean has_disable_fog;
  protobuf_c_boolean disable_fog;
  /*
   * Sets the pseudo-random seed for the game.
   */
  protobuf_c_boolean has_random_seed;
  uint32_t random_seed;
  /*
   * If set, the game plays in real time.
   */
  protobuf_c_boolean has_realtime;
  protobuf_c_boolean realtime;
  SC2APIProtocol__RequestCreateGame__MapCase map_case;
  union {
    /*
     * Local .SC2Map file
     */
    SC2APIProtocol__LocalMap *local_map;
    /*
     * Map published to BattleNet
     */
    char *battlenet_map_name;
  };
};
#define SC2_APIPROTOCOL__REQUEST_CREATE_GAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__request_create_game__descriptor) \
    , 0,NULL, 0, 0, 0, 0, 0, 0, SC2_APIPROTOCOL__REQUEST_CREATE_GAME__MAP__NOT_SET, {0} }


struct  _SC2APIProtocol__LocalMap
{
  ProtobufCMessage base;
  /*
   * A map can be specified either by a file path or the data of the .SC2Map file.
   * If you provide both, it will play the game using map_data and store map_path
   * into the replay. (260 character max)
   */
  char *map_path;
  protobuf_c_boolean has_map_data;
  ProtobufCBinaryData map_data;
};
#define SC2_APIPROTOCOL__LOCAL_MAP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__local_map__descriptor) \
    , NULL, 0, {0,NULL} }


struct  _SC2APIProtocol__ResponseCreateGame
{
  ProtobufCMessage base;
  protobuf_c_boolean has_error;
  SC2APIProtocol__ResponseCreateGame__Error error;
  char *error_details;
};
#define SC2_APIPROTOCOL__RESPONSE_CREATE_GAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__response_create_game__descriptor) \
    , 0, SC2_APIPROTOCOL__RESPONSE_CREATE_GAME__ERROR__MissingMap, NULL }


typedef enum {
  SC2_APIPROTOCOL__REQUEST_JOIN_GAME__PARTICIPATION__NOT_SET = 0,
  SC2_APIPROTOCOL__REQUEST_JOIN_GAME__PARTICIPATION_RACE = 1,
  SC2_APIPROTOCOL__REQUEST_JOIN_GAME__PARTICIPATION_OBSERVED_PLAYER_ID = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SC2_APIPROTOCOL__REQUEST_JOIN_GAME__PARTICIPATION)
} SC2APIProtocol__RequestJoinGame__ParticipationCase;

/*
 *-----------------------------------------------------------------------------
 * If successful, puts the game into the status: in_game. Will be able to
 * request actions, observations and step the game.
 */
struct  _SC2APIProtocol__RequestJoinGame
{
  ProtobufCMessage base;
  /*
   * This is limited to what is specified in RequestCreateGame, but you can request less information if you want.
   */
  SC2APIProtocol__InterfaceOptions *options;
  /*
   * Do not set in the single-player case. This is the port a server will use.
   */
  SC2APIProtocol__PortSet *server_ports;
  /*
   * Do not set in the single-player case. These are the ports clients will use to initialize communication.
   */
  size_t n_client_ports;
  SC2APIProtocol__PortSet **client_ports;
  /*
   * Currently only a singe client is supported.
   */
  /*
   * deprecated
   */
  protobuf_c_boolean has_shared_port;
  int32_t shared_port;
  /*
   * Use this to set the player's name to something other than autogenerated name.
   */
  char *player_name;
  /*
   * Both game creator and joiner should provide the ip address of the game creator in order to play remotely. Defaults to localhost.
   */
  char *host_ip;
  SC2APIProtocol__RequestJoinGame__ParticipationCase participation_case;
  union {
    /*
     * Join as participant
     */
    SC2APIProtocol__Race race;
    /*
     * Join as observer
     */
    uint32_t observed_player_id;
  };
};
#define SC2_APIPROTOCOL__REQUEST_JOIN_GAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__request_join_game__descriptor) \
    , NULL, NULL, 0,NULL, 0, 0, NULL, NULL, SC2_APIPROTOCOL__REQUEST_JOIN_GAME__PARTICIPATION__NOT_SET, {0} }


struct  _SC2APIProtocol__PortSet
{
  ProtobufCMessage base;
  /*
   * Game right now needs two internal ports to establish a multiplay game on the local host.
   */
  protobuf_c_boolean has_game_port;
  int32_t game_port;
  protobuf_c_boolean has_base_port;
  int32_t base_port;
};
#define SC2_APIPROTOCOL__PORT_SET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__port_set__descriptor) \
    , 0, 0, 0, 0 }


struct  _SC2APIProtocol__ResponseJoinGame
{
  ProtobufCMessage base;
  protobuf_c_boolean has_player_id;
  uint32_t player_id;
  protobuf_c_boolean has_error;
  SC2APIProtocol__ResponseJoinGame__Error error;
  char *error_details;
};
#define SC2_APIPROTOCOL__RESPONSE_JOIN_GAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__response_join_game__descriptor) \
    , 0, 0, 0, SC2_APIPROTOCOL__RESPONSE_JOIN_GAME__ERROR__MissingParticipation, NULL }


/*
 *-----------------------------------------------------------------------------
 */
struct  _SC2APIProtocol__RequestRestartGame
{
  ProtobufCMessage base;
};
#define SC2_APIPROTOCOL__REQUEST_RESTART_GAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__request_restart_game__descriptor) \
     }


/*
 * The defaultRestartGameLoops is specified to be (1<<18) by default
 */
struct  _SC2APIProtocol__ResponseRestartGame
{
  ProtobufCMessage base;
  protobuf_c_boolean has_error;
  SC2APIProtocol__ResponseRestartGame__Error error;
  char *error_details;
  /*
   * This will occur once the simulation_loop is greater then defaultRestartGameLoops
   */
  protobuf_c_boolean has_need_hard_reset;
  protobuf_c_boolean need_hard_reset;
};
#define SC2_APIPROTOCOL__RESPONSE_RESTART_GAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__response_restart_game__descriptor) \
    , 0, SC2_APIPROTOCOL__RESPONSE_RESTART_GAME__ERROR__LaunchError, NULL, 0, 0 }


typedef enum {
  SC2_APIPROTOCOL__REQUEST_START_REPLAY__REPLAY__NOT_SET = 0,
  SC2_APIPROTOCOL__REQUEST_START_REPLAY__REPLAY_REPLAY_PATH = 1,
  SC2_APIPROTOCOL__REQUEST_START_REPLAY__REPLAY_REPLAY_DATA = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SC2_APIPROTOCOL__REQUEST_START_REPLAY__REPLAY)
} SC2APIProtocol__RequestStartReplay__ReplayCase;

/*
 *-----------------------------------------------------------------------------
 */
struct  _SC2APIProtocol__RequestStartReplay
{
  ProtobufCMessage base;
  /*
   * Overrides the map path stored in the replay.
   */
  protobuf_c_boolean has_map_data;
  ProtobufCBinaryData map_data;
  protobuf_c_boolean has_observed_player_id;
  int32_t observed_player_id;
  SC2APIProtocol__InterfaceOptions *options;
  protobuf_c_boolean has_disable_fog;
  protobuf_c_boolean disable_fog;
  protobuf_c_boolean has_realtime;
  protobuf_c_boolean realtime;
  /*
   * Allow RequestSaveReplay from a replay. Useful for truncating a replay, or restoring tracker.events.
   */
  protobuf_c_boolean has_record_replay;
  protobuf_c_boolean record_replay;
  SC2APIProtocol__RequestStartReplay__ReplayCase replay_case;
  union {
    char *replay_path;
    ProtobufCBinaryData replay_data;
  };
};
#define SC2_APIPROTOCOL__REQUEST_START_REPLAY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__request_start_replay__descriptor) \
    , 0, {0,NULL}, 0, 0, NULL, 0, 0, 0, 0, 0, 0, SC2_APIPROTOCOL__REQUEST_START_REPLAY__REPLAY__NOT_SET, {0} }


struct  _SC2APIProtocol__ResponseStartReplay
{
  ProtobufCMessage base;
  protobuf_c_boolean has_error;
  SC2APIProtocol__ResponseStartReplay__Error error;
  char *error_details;
};
#define SC2_APIPROTOCOL__RESPONSE_START_REPLAY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__response_start_replay__descriptor) \
    , 0, SC2_APIPROTOCOL__RESPONSE_START_REPLAY__ERROR__MissingReplay, NULL }


/*
 *-----------------------------------------------------------------------------
 */
struct  _SC2APIProtocol__RequestMapCommand
{
  ProtobufCMessage base;
  char *trigger_cmd;
};
#define SC2_APIPROTOCOL__REQUEST_MAP_COMMAND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__request_map_command__descriptor) \
    , NULL }


struct  _SC2APIProtocol__ResponseMapCommand
{
  ProtobufCMessage base;
  protobuf_c_boolean has_error;
  SC2APIProtocol__ResponseMapCommand__Error error;
  char *error_details;
};
#define SC2_APIPROTOCOL__RESPONSE_MAP_COMMAND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__response_map_command__descriptor) \
    , 0, SC2_APIPROTOCOL__RESPONSE_MAP_COMMAND__ERROR__NoTriggerError, NULL }


/*
 *-----------------------------------------------------------------------------
 */
struct  _SC2APIProtocol__RequestLeaveGame
{
  ProtobufCMessage base;
};
#define SC2_APIPROTOCOL__REQUEST_LEAVE_GAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__request_leave_game__descriptor) \
     }


struct  _SC2APIProtocol__ResponseLeaveGame
{
  ProtobufCMessage base;
};
#define SC2_APIPROTOCOL__RESPONSE_LEAVE_GAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__response_leave_game__descriptor) \
     }


/*
 *-----------------------------------------------------------------------------
 */
struct  _SC2APIProtocol__RequestQuickSave
{
  ProtobufCMessage base;
};
#define SC2_APIPROTOCOL__REQUEST_QUICK_SAVE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__request_quick_save__descriptor) \
     }


/*
 *-----------------------------------------------------------------------------
 */
struct  _SC2APIProtocol__ResponseQuickSave
{
  ProtobufCMessage base;
};
#define SC2_APIPROTOCOL__RESPONSE_QUICK_SAVE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__response_quick_save__descriptor) \
     }


/*
 *-----------------------------------------------------------------------------
 */
struct  _SC2APIProtocol__RequestQuickLoad
{
  ProtobufCMessage base;
};
#define SC2_APIPROTOCOL__REQUEST_QUICK_LOAD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__request_quick_load__descriptor) \
     }


/*
 *-----------------------------------------------------------------------------
 */
struct  _SC2APIProtocol__ResponseQuickLoad
{
  ProtobufCMessage base;
};
#define SC2_APIPROTOCOL__RESPONSE_QUICK_LOAD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__response_quick_load__descriptor) \
     }


/*
 *-----------------------------------------------------------------------------
 */
struct  _SC2APIProtocol__RequestQuit
{
  ProtobufCMessage base;
};
#define SC2_APIPROTOCOL__REQUEST_QUIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__request_quit__descriptor) \
     }


struct  _SC2APIProtocol__ResponseQuit
{
  ProtobufCMessage base;
};
#define SC2_APIPROTOCOL__RESPONSE_QUIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__response_quit__descriptor) \
     }


/*
 *-----------------------------------------------------------------------------
 */
struct  _SC2APIProtocol__RequestGameInfo
{
  ProtobufCMessage base;
};
#define SC2_APIPROTOCOL__REQUEST_GAME_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__request_game_info__descriptor) \
     }


struct  _SC2APIProtocol__ResponseGameInfo
{
  ProtobufCMessage base;
  char *map_name;
  size_t n_mod_names;
  char **mod_names;
  char *local_map_path;
  size_t n_player_info;
  SC2APIProtocol__PlayerInfo **player_info;
  /*
   * Populated if Raw interface is enabled.
   */
  SC2APIProtocol__StartRaw *start_raw;
  SC2APIProtocol__InterfaceOptions *options;
};
#define SC2_APIPROTOCOL__RESPONSE_GAME_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__response_game_info__descriptor) \
    , NULL, 0,NULL, NULL, 0,NULL, NULL, NULL }


/*
 *-----------------------------------------------------------------------------
 */
struct  _SC2APIProtocol__RequestObservation
{
  ProtobufCMessage base;
  protobuf_c_boolean has_disable_fog;
  protobuf_c_boolean disable_fog;
  /*
   * In realtime the request will only return once the simulation game loop has reached this value. When not realtime this value is ignored.
   */
  protobuf_c_boolean has_game_loop;
  uint32_t game_loop;
};
#define SC2_APIPROTOCOL__REQUEST_OBSERVATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__request_observation__descriptor) \
    , 0, 0, 0, 0 }


struct  _SC2APIProtocol__ResponseObservation
{
  ProtobufCMessage base;
  /*
   * Actions this player did since the last Observation.
   */
  size_t n_actions;
  SC2APIProtocol__Action **actions;
  /*
   * Equivalent of UI "red text" errors.
   */
  size_t n_action_errors;
  SC2APIProtocol__ActionError **action_errors;
  SC2APIProtocol__Observation *observation;
  /*
   * Only populated if the game ended during this step.
   */
  size_t n_player_result;
  SC2APIProtocol__PlayerResult **player_result;
  size_t n_chat;
  SC2APIProtocol__ChatReceived **chat;
};
#define SC2_APIPROTOCOL__RESPONSE_OBSERVATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__response_observation__descriptor) \
    , 0,NULL, 0,NULL, NULL, 0,NULL, 0,NULL }


struct  _SC2APIProtocol__ChatReceived
{
  ProtobufCMessage base;
  protobuf_c_boolean has_player_id;
  uint32_t player_id;
  char *message;
};
#define SC2_APIPROTOCOL__CHAT_RECEIVED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__chat_received__descriptor) \
    , 0, 0, NULL }


/*
 *-----------------------------------------------------------------------------
 */
struct  _SC2APIProtocol__RequestAction
{
  ProtobufCMessage base;
  size_t n_actions;
  SC2APIProtocol__Action **actions;
};
#define SC2_APIPROTOCOL__REQUEST_ACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__request_action__descriptor) \
    , 0,NULL }


struct  _SC2APIProtocol__ResponseAction
{
  ProtobufCMessage base;
  size_t n_result;
  SC2APIProtocol__ActionResult *result;
};
#define SC2_APIPROTOCOL__RESPONSE_ACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__response_action__descriptor) \
    , 0,NULL }


/*
 *-----------------------------------------------------------------------------
 */
struct  _SC2APIProtocol__RequestObserverAction
{
  ProtobufCMessage base;
  size_t n_actions;
  SC2APIProtocol__ObserverAction **actions;
};
#define SC2_APIPROTOCOL__REQUEST_OBSERVER_ACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__request_observer_action__descriptor) \
    , 0,NULL }


struct  _SC2APIProtocol__ResponseObserverAction
{
  ProtobufCMessage base;
};
#define SC2_APIPROTOCOL__RESPONSE_OBSERVER_ACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__response_observer_action__descriptor) \
     }


/*
 *-----------------------------------------------------------------------------
 */
struct  _SC2APIProtocol__RequestStep
{
  ProtobufCMessage base;
  /*
   * Number of game loops to simulate for the next frame.
   */
  protobuf_c_boolean has_count;
  uint32_t count;
};
#define SC2_APIPROTOCOL__REQUEST_STEP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__request_step__descriptor) \
    , 0, 0 }


struct  _SC2APIProtocol__ResponseStep
{
  ProtobufCMessage base;
  /*
   *  Max simulation_loop is (1<<19) before "end of time" will occur
   *  The "end of time" is classified as the maximum number of game loops or absolute game time
   *  representable as a positive fixed point number.
   *  When we reach the "end of time", permanently pause the game and end the game for all.
   */
  protobuf_c_boolean has_simulation_loop;
  uint32_t simulation_loop;
};
#define SC2_APIPROTOCOL__RESPONSE_STEP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__response_step__descriptor) \
    , 0, 0 }


/*
 *-----------------------------------------------------------------------------
 */
struct  _SC2APIProtocol__RequestData
{
  ProtobufCMessage base;
  protobuf_c_boolean has_ability_id;
  protobuf_c_boolean ability_id;
  protobuf_c_boolean has_unit_type_id;
  protobuf_c_boolean unit_type_id;
  protobuf_c_boolean has_upgrade_id;
  protobuf_c_boolean upgrade_id;
  protobuf_c_boolean has_buff_id;
  protobuf_c_boolean buff_id;
  protobuf_c_boolean has_effect_id;
  protobuf_c_boolean effect_id;
};
#define SC2_APIPROTOCOL__REQUEST_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__request_data__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _SC2APIProtocol__ResponseData
{
  ProtobufCMessage base;
  size_t n_abilities;
  SC2APIProtocol__AbilityData **abilities;
  size_t n_units;
  SC2APIProtocol__UnitTypeData **units;
  size_t n_upgrades;
  SC2APIProtocol__UpgradeData **upgrades;
  size_t n_buffs;
  SC2APIProtocol__BuffData **buffs;
  size_t n_effects;
  SC2APIProtocol__EffectData **effects;
};
#define SC2_APIPROTOCOL__RESPONSE_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__response_data__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


/*
 *-----------------------------------------------------------------------------
 */
struct  _SC2APIProtocol__RequestSaveReplay
{
  ProtobufCMessage base;
};
#define SC2_APIPROTOCOL__REQUEST_SAVE_REPLAY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__request_save_replay__descriptor) \
     }


struct  _SC2APIProtocol__ResponseSaveReplay
{
  ProtobufCMessage base;
  protobuf_c_boolean has_data;
  ProtobufCBinaryData data;
};
#define SC2_APIPROTOCOL__RESPONSE_SAVE_REPLAY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__response_save_replay__descriptor) \
    , 0, {0,NULL} }


typedef enum {
  SC2_APIPROTOCOL__REQUEST_REPLAY_INFO__REPLAY__NOT_SET = 0,
  SC2_APIPROTOCOL__REQUEST_REPLAY_INFO__REPLAY_REPLAY_PATH = 1,
  SC2_APIPROTOCOL__REQUEST_REPLAY_INFO__REPLAY_REPLAY_DATA = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SC2_APIPROTOCOL__REQUEST_REPLAY_INFO__REPLAY)
} SC2APIProtocol__RequestReplayInfo__ReplayCase;

/*
 *-----------------------------------------------------------------------------
 */
struct  _SC2APIProtocol__RequestReplayInfo
{
  ProtobufCMessage base;
  /*
   * Ensure the data and binary are downloaded if this is an old version replay.
   */
  protobuf_c_boolean has_download_data;
  protobuf_c_boolean download_data;
  SC2APIProtocol__RequestReplayInfo__ReplayCase replay_case;
  union {
    /*
     * Limitation: might fail if the replay file is currently loaded.
     */
    char *replay_path;
    ProtobufCBinaryData replay_data;
  };
};
#define SC2_APIPROTOCOL__REQUEST_REPLAY_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__request_replay_info__descriptor) \
    , 0, 0, SC2_APIPROTOCOL__REQUEST_REPLAY_INFO__REPLAY__NOT_SET, {0} }


struct  _SC2APIProtocol__PlayerInfoExtra
{
  ProtobufCMessage base;
  SC2APIProtocol__PlayerInfo *player_info;
  SC2APIProtocol__PlayerResult *player_result;
  protobuf_c_boolean has_player_mmr;
  int32_t player_mmr;
  protobuf_c_boolean has_player_apm;
  int32_t player_apm;
};
#define SC2_APIPROTOCOL__PLAYER_INFO_EXTRA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__player_info_extra__descriptor) \
    , NULL, NULL, 0, 0, 0, 0 }


struct  _SC2APIProtocol__ResponseReplayInfo
{
  ProtobufCMessage base;
  char *map_name;
  char *local_map_path;
  size_t n_player_info;
  SC2APIProtocol__PlayerInfoExtra **player_info;
  protobuf_c_boolean has_game_duration_loops;
  uint32_t game_duration_loops;
  protobuf_c_boolean has_game_duration_seconds;
  float game_duration_seconds;
  char *game_version;
  char *data_version;
  protobuf_c_boolean has_data_build;
  uint32_t data_build;
  protobuf_c_boolean has_base_build;
  uint32_t base_build;
  protobuf_c_boolean has_error;
  SC2APIProtocol__ResponseReplayInfo__Error error;
  char *error_details;
};
#define SC2_APIPROTOCOL__RESPONSE_REPLAY_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__response_replay_info__descriptor) \
    , NULL, NULL, 0,NULL, 0, 0, 0, 0, NULL, NULL, 0, 0, 0, 0, 0, SC2_APIPROTOCOL__RESPONSE_REPLAY_INFO__ERROR__MissingReplay, NULL }


/*
 *-----------------------------------------------------------------------------
 */
struct  _SC2APIProtocol__RequestAvailableMaps
{
  ProtobufCMessage base;
};
#define SC2_APIPROTOCOL__REQUEST_AVAILABLE_MAPS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__request_available_maps__descriptor) \
     }


/*
 * This will only contain locally cached BattleNet maps.
 * To download all ladder maps, log in and queue into a ladder match.
 * To download any other map, play a custom game on that map.
 */
struct  _SC2APIProtocol__ResponseAvailableMaps
{
  ProtobufCMessage base;
  /*
   * All the maps in the "Maps/" directory.
   */
  size_t n_local_map_paths;
  char **local_map_paths;
  /*
   * All the maps in the BattleNet cache.
   */
  size_t n_battlenet_map_names;
  char **battlenet_map_names;
};
#define SC2_APIPROTOCOL__RESPONSE_AVAILABLE_MAPS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__response_available_maps__descriptor) \
    , 0,NULL, 0,NULL }


/*
 *-----------------------------------------------------------------------------
 * Copies map data into the path specified.
 */
struct  _SC2APIProtocol__RequestSaveMap
{
  ProtobufCMessage base;
  /*
   * Path the game process will write to, relative to the temp directory. (260 character max)
   */
  char *map_path;
  /*
   * Binary map data of a .SC2Map.
   */
  protobuf_c_boolean has_map_data;
  ProtobufCBinaryData map_data;
};
#define SC2_APIPROTOCOL__REQUEST_SAVE_MAP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__request_save_map__descriptor) \
    , NULL, 0, {0,NULL} }


struct  _SC2APIProtocol__ResponseSaveMap
{
  ProtobufCMessage base;
  protobuf_c_boolean has_error;
  SC2APIProtocol__ResponseSaveMap__Error error;
};
#define SC2_APIPROTOCOL__RESPONSE_SAVE_MAP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__response_save_map__descriptor) \
    , 0, SC2_APIPROTOCOL__RESPONSE_SAVE_MAP__ERROR__InvalidMapData }


/*
 *-----------------------------------------------------------------------------
 */
struct  _SC2APIProtocol__RequestPing
{
  ProtobufCMessage base;
};
#define SC2_APIPROTOCOL__REQUEST_PING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__request_ping__descriptor) \
     }


struct  _SC2APIProtocol__ResponsePing
{
  ProtobufCMessage base;
  char *game_version;
  char *data_version;
  protobuf_c_boolean has_data_build;
  uint32_t data_build;
  protobuf_c_boolean has_base_build;
  uint32_t base_build;
};
#define SC2_APIPROTOCOL__RESPONSE_PING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__response_ping__descriptor) \
    , NULL, NULL, 0, 0, 0, 0 }


/*
 *-----------------------------------------------------------------------------
 */
struct  _SC2APIProtocol__RequestDebug
{
  ProtobufCMessage base;
  size_t n_debug;
  SC2APIProtocol__DebugCommand **debug;
};
#define SC2_APIPROTOCOL__REQUEST_DEBUG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__request_debug__descriptor) \
    , 0,NULL }


struct  _SC2APIProtocol__ResponseDebug
{
  ProtobufCMessage base;
};
#define SC2_APIPROTOCOL__RESPONSE_DEBUG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__response_debug__descriptor) \
     }


struct  _SC2APIProtocol__PlayerSetup
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  SC2APIProtocol__PlayerType type;
  /*
   * Only used for a computer player.
   */
  protobuf_c_boolean has_race;
  SC2APIProtocol__Race race;
  protobuf_c_boolean has_difficulty;
  SC2APIProtocol__Difficulty difficulty;
  char *player_name;
  protobuf_c_boolean has_ai_build;
  SC2APIProtocol__AIBuild ai_build;
};
#define SC2_APIPROTOCOL__PLAYER_SETUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__player_setup__descriptor) \
    , 0, SC2_APIPROTOCOL__PLAYER_TYPE__Participant, 0, SC2_APIPROTOCOL__RACE__NoRace, 0, SC2_APIPROTOCOL__DIFFICULTY__VeryEasy, NULL, 0, SC2_APIPROTOCOL__AIBUILD__RandomBuild }


struct  _SC2APIProtocol__SpatialCameraSetup
{
  ProtobufCMessage base;
  SC2APIProtocol__Size2DI *resolution;
  SC2APIProtocol__Size2DI *minimap_resolution;
  /*
   * Below are only relevant for feature layers.
   */
  /*
   * Set the screen camera width in world units.
   */
  protobuf_c_boolean has_width;
  float width;
  /*
   * Crop minimap to the playable area.
   */
  protobuf_c_boolean has_crop_to_playable_area;
  protobuf_c_boolean crop_to_playable_area;
  /*
   * Return unit_type on the minimap, and potentially other cheating layers.
   */
  protobuf_c_boolean has_allow_cheating_layers;
  protobuf_c_boolean allow_cheating_layers;
};
#define SC2_APIPROTOCOL__SPATIAL_CAMERA_SETUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__spatial_camera_setup__descriptor) \
    , NULL, NULL, 0, 0, 0, 0, 0, 0 }


struct  _SC2APIProtocol__InterfaceOptions
{
  ProtobufCMessage base;
  /*
   * Interface options
   */
  protobuf_c_boolean has_raw;
  protobuf_c_boolean raw;
  protobuf_c_boolean has_score;
  protobuf_c_boolean score;
  /*
   * Omit to disable.
   */
  SC2APIProtocol__SpatialCameraSetup *feature_layer;
  /*
   * Omit to disable.
   */
  SC2APIProtocol__SpatialCameraSetup *render;
  /*
   * By default cloaked units are completely hidden. This shows some details.
   */
  protobuf_c_boolean has_show_cloaked;
  protobuf_c_boolean show_cloaked;
  /*
   * By default burrowed units are completely hidden. This shows some details for those that produce a shadow.
   */
  protobuf_c_boolean has_show_burrowed_shadows;
  protobuf_c_boolean show_burrowed_shadows;
  /*
   * Return placeholder units (buildings to be constructed), both for raw and feature layers.
   */
  protobuf_c_boolean has_show_placeholders;
  protobuf_c_boolean show_placeholders;
  /*
   * By default raw actions select, act and revert the selection. This is useful
   * if you're playing simultaneously with the agent so it doesn't steal your
   * selection. This inflates APM (due to deselect) and makes the actions hard
   * to follow in a replay. Setting this to true will cause raw actions to do
   * select, act, but not revert the selection.
   */
  protobuf_c_boolean has_raw_affects_selection;
  protobuf_c_boolean raw_affects_selection;
  /*
   * Changes the coordinates in raw.proto to be relative to the playable area.
   * The map_size and playable_area will be the diagonal of the real playable area.
   */
  protobuf_c_boolean has_raw_crop_to_playable_area;
  protobuf_c_boolean raw_crop_to_playable_area;
};
#define SC2_APIPROTOCOL__INTERFACE_OPTIONS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__interface_options__descriptor) \
    , 0, 0, 0, 0, NULL, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _SC2APIProtocol__PlayerInfo
{
  ProtobufCMessage base;
  /*
   * Identifier that will be used to reference this player.
   * SC2 will always assign playerIds starting from 1 in standard Melee maps. This may not be true in custom maps.
   */
  protobuf_c_boolean has_player_id;
  uint32_t player_id;
  protobuf_c_boolean has_type;
  SC2APIProtocol__PlayerType type;
  protobuf_c_boolean has_race_requested;
  SC2APIProtocol__Race race_requested;
  /*
   * Only populated for your player or when watching replay
   */
  protobuf_c_boolean has_race_actual;
  SC2APIProtocol__Race race_actual;
  protobuf_c_boolean has_difficulty;
  SC2APIProtocol__Difficulty difficulty;
  protobuf_c_boolean has_ai_build;
  SC2APIProtocol__AIBuild ai_build;
  char *player_name;
};
#define SC2_APIPROTOCOL__PLAYER_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__player_info__descriptor) \
    , 0, 0, 0, SC2_APIPROTOCOL__PLAYER_TYPE__Participant, 0, SC2_APIPROTOCOL__RACE__NoRace, 0, SC2_APIPROTOCOL__RACE__NoRace, 0, SC2_APIPROTOCOL__DIFFICULTY__VeryEasy, 0, SC2_APIPROTOCOL__AIBUILD__RandomBuild, NULL }


struct  _SC2APIProtocol__PlayerCommon
{
  ProtobufCMessage base;
  protobuf_c_boolean has_player_id;
  uint32_t player_id;
  protobuf_c_boolean has_minerals;
  uint32_t minerals;
  protobuf_c_boolean has_vespene;
  uint32_t vespene;
  protobuf_c_boolean has_food_cap;
  uint32_t food_cap;
  protobuf_c_boolean has_food_used;
  uint32_t food_used;
  protobuf_c_boolean has_food_army;
  uint32_t food_army;
  protobuf_c_boolean has_food_workers;
  uint32_t food_workers;
  protobuf_c_boolean has_idle_worker_count;
  uint32_t idle_worker_count;
  protobuf_c_boolean has_army_count;
  uint32_t army_count;
  protobuf_c_boolean has_warp_gate_count;
  uint32_t warp_gate_count;
  protobuf_c_boolean has_larva_count;
  uint32_t larva_count;
};
#define SC2_APIPROTOCOL__PLAYER_COMMON__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__player_common__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _SC2APIProtocol__Observation
{
  ProtobufCMessage base;
  protobuf_c_boolean has_game_loop;
  uint32_t game_loop;
  SC2APIProtocol__PlayerCommon *player_common;
  size_t n_alerts;
  SC2APIProtocol__Alert *alerts;
  /*
   * Abilities available in the selection. Enabled if in this list, disabled otherwise.
   */
  size_t n_abilities;
  SC2APIProtocol__AvailableAbility **abilities;
  SC2APIProtocol__Score *score;
  /*
   * Populated if Raw interface is enabled.
   */
  SC2APIProtocol__ObservationRaw *raw_data;
  /*
   * Populated if Feature Layer interface is enabled.
   */
  SC2APIProtocol__ObservationFeatureLayer *feature_layer_data;
  /*
   * Populated if Render interface is enabled.
   */
  SC2APIProtocol__ObservationRender *render_data;
  /*
   * Populated if Feature Layer or Render interface is enabled.
   */
  SC2APIProtocol__ObservationUI *ui_data;
};
#define SC2_APIPROTOCOL__OBSERVATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__observation__descriptor) \
    , 0, 0, NULL, 0,NULL, 0,NULL, NULL, NULL, NULL, NULL, NULL }


struct  _SC2APIProtocol__Action
{
  ProtobufCMessage base;
  /*
   * Populated if Raw interface is enabled.
   */
  SC2APIProtocol__ActionRaw *action_raw;
  /*
   * Populated if Feature Layer interface is enabled.
   */
  SC2APIProtocol__ActionSpatial *action_feature_layer;
  /*
   * Not implemented. Populated if Render interface is enabled.
   */
  SC2APIProtocol__ActionSpatial *action_render;
  /*
   * Populated if Feature Layer or Render interface is enabled.
   */
  SC2APIProtocol__ActionUI *action_ui;
  /*
   * Chat messages as a player typing into the chat channel.
   */
  SC2APIProtocol__ActionChat *action_chat;
  /*
   * Populated for actions in ResponseObservation. The game loop on which the action was executed.
   */
  protobuf_c_boolean has_game_loop;
  uint32_t game_loop;
};
#define SC2_APIPROTOCOL__ACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__action__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, 0, 0 }


struct  _SC2APIProtocol__ActionChat
{
  ProtobufCMessage base;
  protobuf_c_boolean has_channel;
  SC2APIProtocol__ActionChat__Channel channel;
  char *message;
};
#define SC2_APIPROTOCOL__ACTION_CHAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__action_chat__descriptor) \
    , 0, SC2_APIPROTOCOL__ACTION_CHAT__CHANNEL__Broadcast, NULL }


struct  _SC2APIProtocol__ActionError
{
  ProtobufCMessage base;
  /*
   * Only populated when using raw interface.
   */
  protobuf_c_boolean has_unit_tag;
  uint64_t unit_tag;
  protobuf_c_boolean has_ability_id;
  uint64_t ability_id;
  protobuf_c_boolean has_result;
  SC2APIProtocol__ActionResult result;
};
#define SC2_APIPROTOCOL__ACTION_ERROR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__action_error__descriptor) \
    , 0, 0, 0, 0, 0, SC2_APIPROTOCOL__ACTION_RESULT__Success }


typedef enum {
  SC2_APIPROTOCOL__OBSERVER_ACTION__ACTION__NOT_SET = 0,
  SC2_APIPROTOCOL__OBSERVER_ACTION__ACTION_PLAYER_PERSPECTIVE = 1,
  SC2_APIPROTOCOL__OBSERVER_ACTION__ACTION_CAMERA_MOVE = 2,
  SC2_APIPROTOCOL__OBSERVER_ACTION__ACTION_CAMERA_FOLLOW_PLAYER = 3,
  SC2_APIPROTOCOL__OBSERVER_ACTION__ACTION_CAMERA_FOLLOW_UNITS = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SC2_APIPROTOCOL__OBSERVER_ACTION__ACTION)
} SC2APIProtocol__ObserverAction__ActionCase;

struct  _SC2APIProtocol__ObserverAction
{
  ProtobufCMessage base;
  SC2APIProtocol__ObserverAction__ActionCase action_case;
  union {
    /*
     * Not implemented
     */
    SC2APIProtocol__ActionObserverPlayerPerspective *player_perspective;
    SC2APIProtocol__ActionObserverCameraMove *camera_move;
    SC2APIProtocol__ActionObserverCameraFollowPlayer *camera_follow_player;
    /*
     * Not implemented
     */
    SC2APIProtocol__ActionObserverCameraFollowUnits *camera_follow_units;
  };
};
#define SC2_APIPROTOCOL__OBSERVER_ACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__observer_action__descriptor) \
    , SC2_APIPROTOCOL__OBSERVER_ACTION__ACTION__NOT_SET, {0} }


struct  _SC2APIProtocol__ActionObserverPlayerPerspective
{
  ProtobufCMessage base;
  /*
   * 0 to observe "Everyone"
   */
  protobuf_c_boolean has_player_id;
  uint32_t player_id;
};
#define SC2_APIPROTOCOL__ACTION_OBSERVER_PLAYER_PERSPECTIVE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__action_observer_player_perspective__descriptor) \
    , 0, 0 }


struct  _SC2APIProtocol__ActionObserverCameraMove
{
  ProtobufCMessage base;
  SC2APIProtocol__Point2D *world_pos;
  /*
   * Distance between camera and terrain. Larger value zooms out camera.
   * Defaults to standard camera distance if set to 0.
   */
  protobuf_c_boolean has_distance;
  float distance;
};
#define SC2_APIPROTOCOL__ACTION_OBSERVER_CAMERA_MOVE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__action_observer_camera_move__descriptor) \
    , NULL, 0, 0 }


struct  _SC2APIProtocol__ActionObserverCameraFollowPlayer
{
  ProtobufCMessage base;
  /*
   * Not implemented. Value must be [1, 15]
   */
  protobuf_c_boolean has_player_id;
  uint32_t player_id;
};
#define SC2_APIPROTOCOL__ACTION_OBSERVER_CAMERA_FOLLOW_PLAYER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__action_observer_camera_follow_player__descriptor) \
    , 0, 0 }


struct  _SC2APIProtocol__ActionObserverCameraFollowUnits
{
  ProtobufCMessage base;
  size_t n_unit_tags;
  uint64_t *unit_tags;
};
#define SC2_APIPROTOCOL__ACTION_OBSERVER_CAMERA_FOLLOW_UNITS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__action_observer_camera_follow_units__descriptor) \
    , 0,NULL }


struct  _SC2APIProtocol__PlayerResult
{
  ProtobufCMessage base;
  protobuf_c_boolean has_player_id;
  uint32_t player_id;
  protobuf_c_boolean has_result;
  SC2APIProtocol__Result result;
};
#define SC2_APIPROTOCOL__PLAYER_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__player_result__descriptor) \
    , 0, 0, 0, SC2_APIPROTOCOL__RESULT__Victory }


/* SC2APIProtocol__Request methods */
void   sc2_apiprotocol__request__init
                     (SC2APIProtocol__Request         *message);
size_t sc2_apiprotocol__request__get_packed_size
                     (const SC2APIProtocol__Request   *message);
size_t sc2_apiprotocol__request__pack
                     (const SC2APIProtocol__Request   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__request__pack_to_buffer
                     (const SC2APIProtocol__Request   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__Request *
       sc2_apiprotocol__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__request__free_unpacked
                     (SC2APIProtocol__Request *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__Response methods */
void   sc2_apiprotocol__response__init
                     (SC2APIProtocol__Response         *message);
size_t sc2_apiprotocol__response__get_packed_size
                     (const SC2APIProtocol__Response   *message);
size_t sc2_apiprotocol__response__pack
                     (const SC2APIProtocol__Response   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__response__pack_to_buffer
                     (const SC2APIProtocol__Response   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__Response *
       sc2_apiprotocol__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__response__free_unpacked
                     (SC2APIProtocol__Response *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__RequestCreateGame methods */
void   sc2_apiprotocol__request_create_game__init
                     (SC2APIProtocol__RequestCreateGame         *message);
size_t sc2_apiprotocol__request_create_game__get_packed_size
                     (const SC2APIProtocol__RequestCreateGame   *message);
size_t sc2_apiprotocol__request_create_game__pack
                     (const SC2APIProtocol__RequestCreateGame   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__request_create_game__pack_to_buffer
                     (const SC2APIProtocol__RequestCreateGame   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__RequestCreateGame *
       sc2_apiprotocol__request_create_game__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__request_create_game__free_unpacked
                     (SC2APIProtocol__RequestCreateGame *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__LocalMap methods */
void   sc2_apiprotocol__local_map__init
                     (SC2APIProtocol__LocalMap         *message);
size_t sc2_apiprotocol__local_map__get_packed_size
                     (const SC2APIProtocol__LocalMap   *message);
size_t sc2_apiprotocol__local_map__pack
                     (const SC2APIProtocol__LocalMap   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__local_map__pack_to_buffer
                     (const SC2APIProtocol__LocalMap   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__LocalMap *
       sc2_apiprotocol__local_map__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__local_map__free_unpacked
                     (SC2APIProtocol__LocalMap *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__ResponseCreateGame methods */
void   sc2_apiprotocol__response_create_game__init
                     (SC2APIProtocol__ResponseCreateGame         *message);
size_t sc2_apiprotocol__response_create_game__get_packed_size
                     (const SC2APIProtocol__ResponseCreateGame   *message);
size_t sc2_apiprotocol__response_create_game__pack
                     (const SC2APIProtocol__ResponseCreateGame   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__response_create_game__pack_to_buffer
                     (const SC2APIProtocol__ResponseCreateGame   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ResponseCreateGame *
       sc2_apiprotocol__response_create_game__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__response_create_game__free_unpacked
                     (SC2APIProtocol__ResponseCreateGame *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__RequestJoinGame methods */
void   sc2_apiprotocol__request_join_game__init
                     (SC2APIProtocol__RequestJoinGame         *message);
size_t sc2_apiprotocol__request_join_game__get_packed_size
                     (const SC2APIProtocol__RequestJoinGame   *message);
size_t sc2_apiprotocol__request_join_game__pack
                     (const SC2APIProtocol__RequestJoinGame   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__request_join_game__pack_to_buffer
                     (const SC2APIProtocol__RequestJoinGame   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__RequestJoinGame *
       sc2_apiprotocol__request_join_game__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__request_join_game__free_unpacked
                     (SC2APIProtocol__RequestJoinGame *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__PortSet methods */
void   sc2_apiprotocol__port_set__init
                     (SC2APIProtocol__PortSet         *message);
size_t sc2_apiprotocol__port_set__get_packed_size
                     (const SC2APIProtocol__PortSet   *message);
size_t sc2_apiprotocol__port_set__pack
                     (const SC2APIProtocol__PortSet   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__port_set__pack_to_buffer
                     (const SC2APIProtocol__PortSet   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__PortSet *
       sc2_apiprotocol__port_set__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__port_set__free_unpacked
                     (SC2APIProtocol__PortSet *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__ResponseJoinGame methods */
void   sc2_apiprotocol__response_join_game__init
                     (SC2APIProtocol__ResponseJoinGame         *message);
size_t sc2_apiprotocol__response_join_game__get_packed_size
                     (const SC2APIProtocol__ResponseJoinGame   *message);
size_t sc2_apiprotocol__response_join_game__pack
                     (const SC2APIProtocol__ResponseJoinGame   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__response_join_game__pack_to_buffer
                     (const SC2APIProtocol__ResponseJoinGame   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ResponseJoinGame *
       sc2_apiprotocol__response_join_game__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__response_join_game__free_unpacked
                     (SC2APIProtocol__ResponseJoinGame *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__RequestRestartGame methods */
void   sc2_apiprotocol__request_restart_game__init
                     (SC2APIProtocol__RequestRestartGame         *message);
size_t sc2_apiprotocol__request_restart_game__get_packed_size
                     (const SC2APIProtocol__RequestRestartGame   *message);
size_t sc2_apiprotocol__request_restart_game__pack
                     (const SC2APIProtocol__RequestRestartGame   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__request_restart_game__pack_to_buffer
                     (const SC2APIProtocol__RequestRestartGame   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__RequestRestartGame *
       sc2_apiprotocol__request_restart_game__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__request_restart_game__free_unpacked
                     (SC2APIProtocol__RequestRestartGame *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__ResponseRestartGame methods */
void   sc2_apiprotocol__response_restart_game__init
                     (SC2APIProtocol__ResponseRestartGame         *message);
size_t sc2_apiprotocol__response_restart_game__get_packed_size
                     (const SC2APIProtocol__ResponseRestartGame   *message);
size_t sc2_apiprotocol__response_restart_game__pack
                     (const SC2APIProtocol__ResponseRestartGame   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__response_restart_game__pack_to_buffer
                     (const SC2APIProtocol__ResponseRestartGame   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ResponseRestartGame *
       sc2_apiprotocol__response_restart_game__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__response_restart_game__free_unpacked
                     (SC2APIProtocol__ResponseRestartGame *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__RequestStartReplay methods */
void   sc2_apiprotocol__request_start_replay__init
                     (SC2APIProtocol__RequestStartReplay         *message);
size_t sc2_apiprotocol__request_start_replay__get_packed_size
                     (const SC2APIProtocol__RequestStartReplay   *message);
size_t sc2_apiprotocol__request_start_replay__pack
                     (const SC2APIProtocol__RequestStartReplay   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__request_start_replay__pack_to_buffer
                     (const SC2APIProtocol__RequestStartReplay   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__RequestStartReplay *
       sc2_apiprotocol__request_start_replay__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__request_start_replay__free_unpacked
                     (SC2APIProtocol__RequestStartReplay *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__ResponseStartReplay methods */
void   sc2_apiprotocol__response_start_replay__init
                     (SC2APIProtocol__ResponseStartReplay         *message);
size_t sc2_apiprotocol__response_start_replay__get_packed_size
                     (const SC2APIProtocol__ResponseStartReplay   *message);
size_t sc2_apiprotocol__response_start_replay__pack
                     (const SC2APIProtocol__ResponseStartReplay   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__response_start_replay__pack_to_buffer
                     (const SC2APIProtocol__ResponseStartReplay   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ResponseStartReplay *
       sc2_apiprotocol__response_start_replay__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__response_start_replay__free_unpacked
                     (SC2APIProtocol__ResponseStartReplay *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__RequestMapCommand methods */
void   sc2_apiprotocol__request_map_command__init
                     (SC2APIProtocol__RequestMapCommand         *message);
size_t sc2_apiprotocol__request_map_command__get_packed_size
                     (const SC2APIProtocol__RequestMapCommand   *message);
size_t sc2_apiprotocol__request_map_command__pack
                     (const SC2APIProtocol__RequestMapCommand   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__request_map_command__pack_to_buffer
                     (const SC2APIProtocol__RequestMapCommand   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__RequestMapCommand *
       sc2_apiprotocol__request_map_command__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__request_map_command__free_unpacked
                     (SC2APIProtocol__RequestMapCommand *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__ResponseMapCommand methods */
void   sc2_apiprotocol__response_map_command__init
                     (SC2APIProtocol__ResponseMapCommand         *message);
size_t sc2_apiprotocol__response_map_command__get_packed_size
                     (const SC2APIProtocol__ResponseMapCommand   *message);
size_t sc2_apiprotocol__response_map_command__pack
                     (const SC2APIProtocol__ResponseMapCommand   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__response_map_command__pack_to_buffer
                     (const SC2APIProtocol__ResponseMapCommand   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ResponseMapCommand *
       sc2_apiprotocol__response_map_command__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__response_map_command__free_unpacked
                     (SC2APIProtocol__ResponseMapCommand *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__RequestLeaveGame methods */
void   sc2_apiprotocol__request_leave_game__init
                     (SC2APIProtocol__RequestLeaveGame         *message);
size_t sc2_apiprotocol__request_leave_game__get_packed_size
                     (const SC2APIProtocol__RequestLeaveGame   *message);
size_t sc2_apiprotocol__request_leave_game__pack
                     (const SC2APIProtocol__RequestLeaveGame   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__request_leave_game__pack_to_buffer
                     (const SC2APIProtocol__RequestLeaveGame   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__RequestLeaveGame *
       sc2_apiprotocol__request_leave_game__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__request_leave_game__free_unpacked
                     (SC2APIProtocol__RequestLeaveGame *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__ResponseLeaveGame methods */
void   sc2_apiprotocol__response_leave_game__init
                     (SC2APIProtocol__ResponseLeaveGame         *message);
size_t sc2_apiprotocol__response_leave_game__get_packed_size
                     (const SC2APIProtocol__ResponseLeaveGame   *message);
size_t sc2_apiprotocol__response_leave_game__pack
                     (const SC2APIProtocol__ResponseLeaveGame   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__response_leave_game__pack_to_buffer
                     (const SC2APIProtocol__ResponseLeaveGame   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ResponseLeaveGame *
       sc2_apiprotocol__response_leave_game__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__response_leave_game__free_unpacked
                     (SC2APIProtocol__ResponseLeaveGame *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__RequestQuickSave methods */
void   sc2_apiprotocol__request_quick_save__init
                     (SC2APIProtocol__RequestQuickSave         *message);
size_t sc2_apiprotocol__request_quick_save__get_packed_size
                     (const SC2APIProtocol__RequestQuickSave   *message);
size_t sc2_apiprotocol__request_quick_save__pack
                     (const SC2APIProtocol__RequestQuickSave   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__request_quick_save__pack_to_buffer
                     (const SC2APIProtocol__RequestQuickSave   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__RequestQuickSave *
       sc2_apiprotocol__request_quick_save__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__request_quick_save__free_unpacked
                     (SC2APIProtocol__RequestQuickSave *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__ResponseQuickSave methods */
void   sc2_apiprotocol__response_quick_save__init
                     (SC2APIProtocol__ResponseQuickSave         *message);
size_t sc2_apiprotocol__response_quick_save__get_packed_size
                     (const SC2APIProtocol__ResponseQuickSave   *message);
size_t sc2_apiprotocol__response_quick_save__pack
                     (const SC2APIProtocol__ResponseQuickSave   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__response_quick_save__pack_to_buffer
                     (const SC2APIProtocol__ResponseQuickSave   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ResponseQuickSave *
       sc2_apiprotocol__response_quick_save__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__response_quick_save__free_unpacked
                     (SC2APIProtocol__ResponseQuickSave *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__RequestQuickLoad methods */
void   sc2_apiprotocol__request_quick_load__init
                     (SC2APIProtocol__RequestQuickLoad         *message);
size_t sc2_apiprotocol__request_quick_load__get_packed_size
                     (const SC2APIProtocol__RequestQuickLoad   *message);
size_t sc2_apiprotocol__request_quick_load__pack
                     (const SC2APIProtocol__RequestQuickLoad   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__request_quick_load__pack_to_buffer
                     (const SC2APIProtocol__RequestQuickLoad   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__RequestQuickLoad *
       sc2_apiprotocol__request_quick_load__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__request_quick_load__free_unpacked
                     (SC2APIProtocol__RequestQuickLoad *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__ResponseQuickLoad methods */
void   sc2_apiprotocol__response_quick_load__init
                     (SC2APIProtocol__ResponseQuickLoad         *message);
size_t sc2_apiprotocol__response_quick_load__get_packed_size
                     (const SC2APIProtocol__ResponseQuickLoad   *message);
size_t sc2_apiprotocol__response_quick_load__pack
                     (const SC2APIProtocol__ResponseQuickLoad   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__response_quick_load__pack_to_buffer
                     (const SC2APIProtocol__ResponseQuickLoad   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ResponseQuickLoad *
       sc2_apiprotocol__response_quick_load__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__response_quick_load__free_unpacked
                     (SC2APIProtocol__ResponseQuickLoad *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__RequestQuit methods */
void   sc2_apiprotocol__request_quit__init
                     (SC2APIProtocol__RequestQuit         *message);
size_t sc2_apiprotocol__request_quit__get_packed_size
                     (const SC2APIProtocol__RequestQuit   *message);
size_t sc2_apiprotocol__request_quit__pack
                     (const SC2APIProtocol__RequestQuit   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__request_quit__pack_to_buffer
                     (const SC2APIProtocol__RequestQuit   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__RequestQuit *
       sc2_apiprotocol__request_quit__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__request_quit__free_unpacked
                     (SC2APIProtocol__RequestQuit *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__ResponseQuit methods */
void   sc2_apiprotocol__response_quit__init
                     (SC2APIProtocol__ResponseQuit         *message);
size_t sc2_apiprotocol__response_quit__get_packed_size
                     (const SC2APIProtocol__ResponseQuit   *message);
size_t sc2_apiprotocol__response_quit__pack
                     (const SC2APIProtocol__ResponseQuit   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__response_quit__pack_to_buffer
                     (const SC2APIProtocol__ResponseQuit   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ResponseQuit *
       sc2_apiprotocol__response_quit__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__response_quit__free_unpacked
                     (SC2APIProtocol__ResponseQuit *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__RequestGameInfo methods */
void   sc2_apiprotocol__request_game_info__init
                     (SC2APIProtocol__RequestGameInfo         *message);
size_t sc2_apiprotocol__request_game_info__get_packed_size
                     (const SC2APIProtocol__RequestGameInfo   *message);
size_t sc2_apiprotocol__request_game_info__pack
                     (const SC2APIProtocol__RequestGameInfo   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__request_game_info__pack_to_buffer
                     (const SC2APIProtocol__RequestGameInfo   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__RequestGameInfo *
       sc2_apiprotocol__request_game_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__request_game_info__free_unpacked
                     (SC2APIProtocol__RequestGameInfo *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__ResponseGameInfo methods */
void   sc2_apiprotocol__response_game_info__init
                     (SC2APIProtocol__ResponseGameInfo         *message);
size_t sc2_apiprotocol__response_game_info__get_packed_size
                     (const SC2APIProtocol__ResponseGameInfo   *message);
size_t sc2_apiprotocol__response_game_info__pack
                     (const SC2APIProtocol__ResponseGameInfo   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__response_game_info__pack_to_buffer
                     (const SC2APIProtocol__ResponseGameInfo   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ResponseGameInfo *
       sc2_apiprotocol__response_game_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__response_game_info__free_unpacked
                     (SC2APIProtocol__ResponseGameInfo *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__RequestObservation methods */
void   sc2_apiprotocol__request_observation__init
                     (SC2APIProtocol__RequestObservation         *message);
size_t sc2_apiprotocol__request_observation__get_packed_size
                     (const SC2APIProtocol__RequestObservation   *message);
size_t sc2_apiprotocol__request_observation__pack
                     (const SC2APIProtocol__RequestObservation   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__request_observation__pack_to_buffer
                     (const SC2APIProtocol__RequestObservation   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__RequestObservation *
       sc2_apiprotocol__request_observation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__request_observation__free_unpacked
                     (SC2APIProtocol__RequestObservation *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__ResponseObservation methods */
void   sc2_apiprotocol__response_observation__init
                     (SC2APIProtocol__ResponseObservation         *message);
size_t sc2_apiprotocol__response_observation__get_packed_size
                     (const SC2APIProtocol__ResponseObservation   *message);
size_t sc2_apiprotocol__response_observation__pack
                     (const SC2APIProtocol__ResponseObservation   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__response_observation__pack_to_buffer
                     (const SC2APIProtocol__ResponseObservation   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ResponseObservation *
       sc2_apiprotocol__response_observation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__response_observation__free_unpacked
                     (SC2APIProtocol__ResponseObservation *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__ChatReceived methods */
void   sc2_apiprotocol__chat_received__init
                     (SC2APIProtocol__ChatReceived         *message);
size_t sc2_apiprotocol__chat_received__get_packed_size
                     (const SC2APIProtocol__ChatReceived   *message);
size_t sc2_apiprotocol__chat_received__pack
                     (const SC2APIProtocol__ChatReceived   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__chat_received__pack_to_buffer
                     (const SC2APIProtocol__ChatReceived   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ChatReceived *
       sc2_apiprotocol__chat_received__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__chat_received__free_unpacked
                     (SC2APIProtocol__ChatReceived *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__RequestAction methods */
void   sc2_apiprotocol__request_action__init
                     (SC2APIProtocol__RequestAction         *message);
size_t sc2_apiprotocol__request_action__get_packed_size
                     (const SC2APIProtocol__RequestAction   *message);
size_t sc2_apiprotocol__request_action__pack
                     (const SC2APIProtocol__RequestAction   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__request_action__pack_to_buffer
                     (const SC2APIProtocol__RequestAction   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__RequestAction *
       sc2_apiprotocol__request_action__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__request_action__free_unpacked
                     (SC2APIProtocol__RequestAction *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__ResponseAction methods */
void   sc2_apiprotocol__response_action__init
                     (SC2APIProtocol__ResponseAction         *message);
size_t sc2_apiprotocol__response_action__get_packed_size
                     (const SC2APIProtocol__ResponseAction   *message);
size_t sc2_apiprotocol__response_action__pack
                     (const SC2APIProtocol__ResponseAction   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__response_action__pack_to_buffer
                     (const SC2APIProtocol__ResponseAction   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ResponseAction *
       sc2_apiprotocol__response_action__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__response_action__free_unpacked
                     (SC2APIProtocol__ResponseAction *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__RequestObserverAction methods */
void   sc2_apiprotocol__request_observer_action__init
                     (SC2APIProtocol__RequestObserverAction         *message);
size_t sc2_apiprotocol__request_observer_action__get_packed_size
                     (const SC2APIProtocol__RequestObserverAction   *message);
size_t sc2_apiprotocol__request_observer_action__pack
                     (const SC2APIProtocol__RequestObserverAction   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__request_observer_action__pack_to_buffer
                     (const SC2APIProtocol__RequestObserverAction   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__RequestObserverAction *
       sc2_apiprotocol__request_observer_action__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__request_observer_action__free_unpacked
                     (SC2APIProtocol__RequestObserverAction *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__ResponseObserverAction methods */
void   sc2_apiprotocol__response_observer_action__init
                     (SC2APIProtocol__ResponseObserverAction         *message);
size_t sc2_apiprotocol__response_observer_action__get_packed_size
                     (const SC2APIProtocol__ResponseObserverAction   *message);
size_t sc2_apiprotocol__response_observer_action__pack
                     (const SC2APIProtocol__ResponseObserverAction   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__response_observer_action__pack_to_buffer
                     (const SC2APIProtocol__ResponseObserverAction   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ResponseObserverAction *
       sc2_apiprotocol__response_observer_action__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__response_observer_action__free_unpacked
                     (SC2APIProtocol__ResponseObserverAction *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__RequestStep methods */
void   sc2_apiprotocol__request_step__init
                     (SC2APIProtocol__RequestStep         *message);
size_t sc2_apiprotocol__request_step__get_packed_size
                     (const SC2APIProtocol__RequestStep   *message);
size_t sc2_apiprotocol__request_step__pack
                     (const SC2APIProtocol__RequestStep   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__request_step__pack_to_buffer
                     (const SC2APIProtocol__RequestStep   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__RequestStep *
       sc2_apiprotocol__request_step__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__request_step__free_unpacked
                     (SC2APIProtocol__RequestStep *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__ResponseStep methods */
void   sc2_apiprotocol__response_step__init
                     (SC2APIProtocol__ResponseStep         *message);
size_t sc2_apiprotocol__response_step__get_packed_size
                     (const SC2APIProtocol__ResponseStep   *message);
size_t sc2_apiprotocol__response_step__pack
                     (const SC2APIProtocol__ResponseStep   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__response_step__pack_to_buffer
                     (const SC2APIProtocol__ResponseStep   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ResponseStep *
       sc2_apiprotocol__response_step__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__response_step__free_unpacked
                     (SC2APIProtocol__ResponseStep *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__RequestData methods */
void   sc2_apiprotocol__request_data__init
                     (SC2APIProtocol__RequestData         *message);
size_t sc2_apiprotocol__request_data__get_packed_size
                     (const SC2APIProtocol__RequestData   *message);
size_t sc2_apiprotocol__request_data__pack
                     (const SC2APIProtocol__RequestData   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__request_data__pack_to_buffer
                     (const SC2APIProtocol__RequestData   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__RequestData *
       sc2_apiprotocol__request_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__request_data__free_unpacked
                     (SC2APIProtocol__RequestData *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__ResponseData methods */
void   sc2_apiprotocol__response_data__init
                     (SC2APIProtocol__ResponseData         *message);
size_t sc2_apiprotocol__response_data__get_packed_size
                     (const SC2APIProtocol__ResponseData   *message);
size_t sc2_apiprotocol__response_data__pack
                     (const SC2APIProtocol__ResponseData   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__response_data__pack_to_buffer
                     (const SC2APIProtocol__ResponseData   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ResponseData *
       sc2_apiprotocol__response_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__response_data__free_unpacked
                     (SC2APIProtocol__ResponseData *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__RequestSaveReplay methods */
void   sc2_apiprotocol__request_save_replay__init
                     (SC2APIProtocol__RequestSaveReplay         *message);
size_t sc2_apiprotocol__request_save_replay__get_packed_size
                     (const SC2APIProtocol__RequestSaveReplay   *message);
size_t sc2_apiprotocol__request_save_replay__pack
                     (const SC2APIProtocol__RequestSaveReplay   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__request_save_replay__pack_to_buffer
                     (const SC2APIProtocol__RequestSaveReplay   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__RequestSaveReplay *
       sc2_apiprotocol__request_save_replay__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__request_save_replay__free_unpacked
                     (SC2APIProtocol__RequestSaveReplay *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__ResponseSaveReplay methods */
void   sc2_apiprotocol__response_save_replay__init
                     (SC2APIProtocol__ResponseSaveReplay         *message);
size_t sc2_apiprotocol__response_save_replay__get_packed_size
                     (const SC2APIProtocol__ResponseSaveReplay   *message);
size_t sc2_apiprotocol__response_save_replay__pack
                     (const SC2APIProtocol__ResponseSaveReplay   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__response_save_replay__pack_to_buffer
                     (const SC2APIProtocol__ResponseSaveReplay   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ResponseSaveReplay *
       sc2_apiprotocol__response_save_replay__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__response_save_replay__free_unpacked
                     (SC2APIProtocol__ResponseSaveReplay *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__RequestReplayInfo methods */
void   sc2_apiprotocol__request_replay_info__init
                     (SC2APIProtocol__RequestReplayInfo         *message);
size_t sc2_apiprotocol__request_replay_info__get_packed_size
                     (const SC2APIProtocol__RequestReplayInfo   *message);
size_t sc2_apiprotocol__request_replay_info__pack
                     (const SC2APIProtocol__RequestReplayInfo   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__request_replay_info__pack_to_buffer
                     (const SC2APIProtocol__RequestReplayInfo   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__RequestReplayInfo *
       sc2_apiprotocol__request_replay_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__request_replay_info__free_unpacked
                     (SC2APIProtocol__RequestReplayInfo *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__PlayerInfoExtra methods */
void   sc2_apiprotocol__player_info_extra__init
                     (SC2APIProtocol__PlayerInfoExtra         *message);
size_t sc2_apiprotocol__player_info_extra__get_packed_size
                     (const SC2APIProtocol__PlayerInfoExtra   *message);
size_t sc2_apiprotocol__player_info_extra__pack
                     (const SC2APIProtocol__PlayerInfoExtra   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__player_info_extra__pack_to_buffer
                     (const SC2APIProtocol__PlayerInfoExtra   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__PlayerInfoExtra *
       sc2_apiprotocol__player_info_extra__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__player_info_extra__free_unpacked
                     (SC2APIProtocol__PlayerInfoExtra *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__ResponseReplayInfo methods */
void   sc2_apiprotocol__response_replay_info__init
                     (SC2APIProtocol__ResponseReplayInfo         *message);
size_t sc2_apiprotocol__response_replay_info__get_packed_size
                     (const SC2APIProtocol__ResponseReplayInfo   *message);
size_t sc2_apiprotocol__response_replay_info__pack
                     (const SC2APIProtocol__ResponseReplayInfo   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__response_replay_info__pack_to_buffer
                     (const SC2APIProtocol__ResponseReplayInfo   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ResponseReplayInfo *
       sc2_apiprotocol__response_replay_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__response_replay_info__free_unpacked
                     (SC2APIProtocol__ResponseReplayInfo *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__RequestAvailableMaps methods */
void   sc2_apiprotocol__request_available_maps__init
                     (SC2APIProtocol__RequestAvailableMaps         *message);
size_t sc2_apiprotocol__request_available_maps__get_packed_size
                     (const SC2APIProtocol__RequestAvailableMaps   *message);
size_t sc2_apiprotocol__request_available_maps__pack
                     (const SC2APIProtocol__RequestAvailableMaps   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__request_available_maps__pack_to_buffer
                     (const SC2APIProtocol__RequestAvailableMaps   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__RequestAvailableMaps *
       sc2_apiprotocol__request_available_maps__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__request_available_maps__free_unpacked
                     (SC2APIProtocol__RequestAvailableMaps *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__ResponseAvailableMaps methods */
void   sc2_apiprotocol__response_available_maps__init
                     (SC2APIProtocol__ResponseAvailableMaps         *message);
size_t sc2_apiprotocol__response_available_maps__get_packed_size
                     (const SC2APIProtocol__ResponseAvailableMaps   *message);
size_t sc2_apiprotocol__response_available_maps__pack
                     (const SC2APIProtocol__ResponseAvailableMaps   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__response_available_maps__pack_to_buffer
                     (const SC2APIProtocol__ResponseAvailableMaps   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ResponseAvailableMaps *
       sc2_apiprotocol__response_available_maps__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__response_available_maps__free_unpacked
                     (SC2APIProtocol__ResponseAvailableMaps *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__RequestSaveMap methods */
void   sc2_apiprotocol__request_save_map__init
                     (SC2APIProtocol__RequestSaveMap         *message);
size_t sc2_apiprotocol__request_save_map__get_packed_size
                     (const SC2APIProtocol__RequestSaveMap   *message);
size_t sc2_apiprotocol__request_save_map__pack
                     (const SC2APIProtocol__RequestSaveMap   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__request_save_map__pack_to_buffer
                     (const SC2APIProtocol__RequestSaveMap   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__RequestSaveMap *
       sc2_apiprotocol__request_save_map__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__request_save_map__free_unpacked
                     (SC2APIProtocol__RequestSaveMap *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__ResponseSaveMap methods */
void   sc2_apiprotocol__response_save_map__init
                     (SC2APIProtocol__ResponseSaveMap         *message);
size_t sc2_apiprotocol__response_save_map__get_packed_size
                     (const SC2APIProtocol__ResponseSaveMap   *message);
size_t sc2_apiprotocol__response_save_map__pack
                     (const SC2APIProtocol__ResponseSaveMap   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__response_save_map__pack_to_buffer
                     (const SC2APIProtocol__ResponseSaveMap   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ResponseSaveMap *
       sc2_apiprotocol__response_save_map__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__response_save_map__free_unpacked
                     (SC2APIProtocol__ResponseSaveMap *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__RequestPing methods */
void   sc2_apiprotocol__request_ping__init
                     (SC2APIProtocol__RequestPing         *message);
size_t sc2_apiprotocol__request_ping__get_packed_size
                     (const SC2APIProtocol__RequestPing   *message);
size_t sc2_apiprotocol__request_ping__pack
                     (const SC2APIProtocol__RequestPing   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__request_ping__pack_to_buffer
                     (const SC2APIProtocol__RequestPing   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__RequestPing *
       sc2_apiprotocol__request_ping__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__request_ping__free_unpacked
                     (SC2APIProtocol__RequestPing *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__ResponsePing methods */
void   sc2_apiprotocol__response_ping__init
                     (SC2APIProtocol__ResponsePing         *message);
size_t sc2_apiprotocol__response_ping__get_packed_size
                     (const SC2APIProtocol__ResponsePing   *message);
size_t sc2_apiprotocol__response_ping__pack
                     (const SC2APIProtocol__ResponsePing   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__response_ping__pack_to_buffer
                     (const SC2APIProtocol__ResponsePing   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ResponsePing *
       sc2_apiprotocol__response_ping__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__response_ping__free_unpacked
                     (SC2APIProtocol__ResponsePing *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__RequestDebug methods */
void   sc2_apiprotocol__request_debug__init
                     (SC2APIProtocol__RequestDebug         *message);
size_t sc2_apiprotocol__request_debug__get_packed_size
                     (const SC2APIProtocol__RequestDebug   *message);
size_t sc2_apiprotocol__request_debug__pack
                     (const SC2APIProtocol__RequestDebug   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__request_debug__pack_to_buffer
                     (const SC2APIProtocol__RequestDebug   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__RequestDebug *
       sc2_apiprotocol__request_debug__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__request_debug__free_unpacked
                     (SC2APIProtocol__RequestDebug *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__ResponseDebug methods */
void   sc2_apiprotocol__response_debug__init
                     (SC2APIProtocol__ResponseDebug         *message);
size_t sc2_apiprotocol__response_debug__get_packed_size
                     (const SC2APIProtocol__ResponseDebug   *message);
size_t sc2_apiprotocol__response_debug__pack
                     (const SC2APIProtocol__ResponseDebug   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__response_debug__pack_to_buffer
                     (const SC2APIProtocol__ResponseDebug   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ResponseDebug *
       sc2_apiprotocol__response_debug__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__response_debug__free_unpacked
                     (SC2APIProtocol__ResponseDebug *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__PlayerSetup methods */
void   sc2_apiprotocol__player_setup__init
                     (SC2APIProtocol__PlayerSetup         *message);
size_t sc2_apiprotocol__player_setup__get_packed_size
                     (const SC2APIProtocol__PlayerSetup   *message);
size_t sc2_apiprotocol__player_setup__pack
                     (const SC2APIProtocol__PlayerSetup   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__player_setup__pack_to_buffer
                     (const SC2APIProtocol__PlayerSetup   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__PlayerSetup *
       sc2_apiprotocol__player_setup__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__player_setup__free_unpacked
                     (SC2APIProtocol__PlayerSetup *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__SpatialCameraSetup methods */
void   sc2_apiprotocol__spatial_camera_setup__init
                     (SC2APIProtocol__SpatialCameraSetup         *message);
size_t sc2_apiprotocol__spatial_camera_setup__get_packed_size
                     (const SC2APIProtocol__SpatialCameraSetup   *message);
size_t sc2_apiprotocol__spatial_camera_setup__pack
                     (const SC2APIProtocol__SpatialCameraSetup   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__spatial_camera_setup__pack_to_buffer
                     (const SC2APIProtocol__SpatialCameraSetup   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__SpatialCameraSetup *
       sc2_apiprotocol__spatial_camera_setup__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__spatial_camera_setup__free_unpacked
                     (SC2APIProtocol__SpatialCameraSetup *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__InterfaceOptions methods */
void   sc2_apiprotocol__interface_options__init
                     (SC2APIProtocol__InterfaceOptions         *message);
size_t sc2_apiprotocol__interface_options__get_packed_size
                     (const SC2APIProtocol__InterfaceOptions   *message);
size_t sc2_apiprotocol__interface_options__pack
                     (const SC2APIProtocol__InterfaceOptions   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__interface_options__pack_to_buffer
                     (const SC2APIProtocol__InterfaceOptions   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__InterfaceOptions *
       sc2_apiprotocol__interface_options__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__interface_options__free_unpacked
                     (SC2APIProtocol__InterfaceOptions *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__PlayerInfo methods */
void   sc2_apiprotocol__player_info__init
                     (SC2APIProtocol__PlayerInfo         *message);
size_t sc2_apiprotocol__player_info__get_packed_size
                     (const SC2APIProtocol__PlayerInfo   *message);
size_t sc2_apiprotocol__player_info__pack
                     (const SC2APIProtocol__PlayerInfo   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__player_info__pack_to_buffer
                     (const SC2APIProtocol__PlayerInfo   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__PlayerInfo *
       sc2_apiprotocol__player_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__player_info__free_unpacked
                     (SC2APIProtocol__PlayerInfo *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__PlayerCommon methods */
void   sc2_apiprotocol__player_common__init
                     (SC2APIProtocol__PlayerCommon         *message);
size_t sc2_apiprotocol__player_common__get_packed_size
                     (const SC2APIProtocol__PlayerCommon   *message);
size_t sc2_apiprotocol__player_common__pack
                     (const SC2APIProtocol__PlayerCommon   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__player_common__pack_to_buffer
                     (const SC2APIProtocol__PlayerCommon   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__PlayerCommon *
       sc2_apiprotocol__player_common__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__player_common__free_unpacked
                     (SC2APIProtocol__PlayerCommon *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__Observation methods */
void   sc2_apiprotocol__observation__init
                     (SC2APIProtocol__Observation         *message);
size_t sc2_apiprotocol__observation__get_packed_size
                     (const SC2APIProtocol__Observation   *message);
size_t sc2_apiprotocol__observation__pack
                     (const SC2APIProtocol__Observation   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__observation__pack_to_buffer
                     (const SC2APIProtocol__Observation   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__Observation *
       sc2_apiprotocol__observation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__observation__free_unpacked
                     (SC2APIProtocol__Observation *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__Action methods */
void   sc2_apiprotocol__action__init
                     (SC2APIProtocol__Action         *message);
size_t sc2_apiprotocol__action__get_packed_size
                     (const SC2APIProtocol__Action   *message);
size_t sc2_apiprotocol__action__pack
                     (const SC2APIProtocol__Action   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__action__pack_to_buffer
                     (const SC2APIProtocol__Action   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__Action *
       sc2_apiprotocol__action__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__action__free_unpacked
                     (SC2APIProtocol__Action *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__ActionChat methods */
void   sc2_apiprotocol__action_chat__init
                     (SC2APIProtocol__ActionChat         *message);
size_t sc2_apiprotocol__action_chat__get_packed_size
                     (const SC2APIProtocol__ActionChat   *message);
size_t sc2_apiprotocol__action_chat__pack
                     (const SC2APIProtocol__ActionChat   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__action_chat__pack_to_buffer
                     (const SC2APIProtocol__ActionChat   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ActionChat *
       sc2_apiprotocol__action_chat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__action_chat__free_unpacked
                     (SC2APIProtocol__ActionChat *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__ActionError methods */
void   sc2_apiprotocol__action_error__init
                     (SC2APIProtocol__ActionError         *message);
size_t sc2_apiprotocol__action_error__get_packed_size
                     (const SC2APIProtocol__ActionError   *message);
size_t sc2_apiprotocol__action_error__pack
                     (const SC2APIProtocol__ActionError   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__action_error__pack_to_buffer
                     (const SC2APIProtocol__ActionError   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ActionError *
       sc2_apiprotocol__action_error__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__action_error__free_unpacked
                     (SC2APIProtocol__ActionError *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__ObserverAction methods */
void   sc2_apiprotocol__observer_action__init
                     (SC2APIProtocol__ObserverAction         *message);
size_t sc2_apiprotocol__observer_action__get_packed_size
                     (const SC2APIProtocol__ObserverAction   *message);
size_t sc2_apiprotocol__observer_action__pack
                     (const SC2APIProtocol__ObserverAction   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__observer_action__pack_to_buffer
                     (const SC2APIProtocol__ObserverAction   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ObserverAction *
       sc2_apiprotocol__observer_action__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__observer_action__free_unpacked
                     (SC2APIProtocol__ObserverAction *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__ActionObserverPlayerPerspective methods */
void   sc2_apiprotocol__action_observer_player_perspective__init
                     (SC2APIProtocol__ActionObserverPlayerPerspective         *message);
size_t sc2_apiprotocol__action_observer_player_perspective__get_packed_size
                     (const SC2APIProtocol__ActionObserverPlayerPerspective   *message);
size_t sc2_apiprotocol__action_observer_player_perspective__pack
                     (const SC2APIProtocol__ActionObserverPlayerPerspective   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__action_observer_player_perspective__pack_to_buffer
                     (const SC2APIProtocol__ActionObserverPlayerPerspective   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ActionObserverPlayerPerspective *
       sc2_apiprotocol__action_observer_player_perspective__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__action_observer_player_perspective__free_unpacked
                     (SC2APIProtocol__ActionObserverPlayerPerspective *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__ActionObserverCameraMove methods */
void   sc2_apiprotocol__action_observer_camera_move__init
                     (SC2APIProtocol__ActionObserverCameraMove         *message);
size_t sc2_apiprotocol__action_observer_camera_move__get_packed_size
                     (const SC2APIProtocol__ActionObserverCameraMove   *message);
size_t sc2_apiprotocol__action_observer_camera_move__pack
                     (const SC2APIProtocol__ActionObserverCameraMove   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__action_observer_camera_move__pack_to_buffer
                     (const SC2APIProtocol__ActionObserverCameraMove   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ActionObserverCameraMove *
       sc2_apiprotocol__action_observer_camera_move__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__action_observer_camera_move__free_unpacked
                     (SC2APIProtocol__ActionObserverCameraMove *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__ActionObserverCameraFollowPlayer methods */
void   sc2_apiprotocol__action_observer_camera_follow_player__init
                     (SC2APIProtocol__ActionObserverCameraFollowPlayer         *message);
size_t sc2_apiprotocol__action_observer_camera_follow_player__get_packed_size
                     (const SC2APIProtocol__ActionObserverCameraFollowPlayer   *message);
size_t sc2_apiprotocol__action_observer_camera_follow_player__pack
                     (const SC2APIProtocol__ActionObserverCameraFollowPlayer   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__action_observer_camera_follow_player__pack_to_buffer
                     (const SC2APIProtocol__ActionObserverCameraFollowPlayer   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ActionObserverCameraFollowPlayer *
       sc2_apiprotocol__action_observer_camera_follow_player__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__action_observer_camera_follow_player__free_unpacked
                     (SC2APIProtocol__ActionObserverCameraFollowPlayer *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__ActionObserverCameraFollowUnits methods */
void   sc2_apiprotocol__action_observer_camera_follow_units__init
                     (SC2APIProtocol__ActionObserverCameraFollowUnits         *message);
size_t sc2_apiprotocol__action_observer_camera_follow_units__get_packed_size
                     (const SC2APIProtocol__ActionObserverCameraFollowUnits   *message);
size_t sc2_apiprotocol__action_observer_camera_follow_units__pack
                     (const SC2APIProtocol__ActionObserverCameraFollowUnits   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__action_observer_camera_follow_units__pack_to_buffer
                     (const SC2APIProtocol__ActionObserverCameraFollowUnits   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ActionObserverCameraFollowUnits *
       sc2_apiprotocol__action_observer_camera_follow_units__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__action_observer_camera_follow_units__free_unpacked
                     (SC2APIProtocol__ActionObserverCameraFollowUnits *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__PlayerResult methods */
void   sc2_apiprotocol__player_result__init
                     (SC2APIProtocol__PlayerResult         *message);
size_t sc2_apiprotocol__player_result__get_packed_size
                     (const SC2APIProtocol__PlayerResult   *message);
size_t sc2_apiprotocol__player_result__pack
                     (const SC2APIProtocol__PlayerResult   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__player_result__pack_to_buffer
                     (const SC2APIProtocol__PlayerResult   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__PlayerResult *
       sc2_apiprotocol__player_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__player_result__free_unpacked
                     (SC2APIProtocol__PlayerResult *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*SC2APIProtocol__Request_Closure)
                 (const SC2APIProtocol__Request *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__Response_Closure)
                 (const SC2APIProtocol__Response *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__RequestCreateGame_Closure)
                 (const SC2APIProtocol__RequestCreateGame *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__LocalMap_Closure)
                 (const SC2APIProtocol__LocalMap *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__ResponseCreateGame_Closure)
                 (const SC2APIProtocol__ResponseCreateGame *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__RequestJoinGame_Closure)
                 (const SC2APIProtocol__RequestJoinGame *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__PortSet_Closure)
                 (const SC2APIProtocol__PortSet *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__ResponseJoinGame_Closure)
                 (const SC2APIProtocol__ResponseJoinGame *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__RequestRestartGame_Closure)
                 (const SC2APIProtocol__RequestRestartGame *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__ResponseRestartGame_Closure)
                 (const SC2APIProtocol__ResponseRestartGame *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__RequestStartReplay_Closure)
                 (const SC2APIProtocol__RequestStartReplay *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__ResponseStartReplay_Closure)
                 (const SC2APIProtocol__ResponseStartReplay *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__RequestMapCommand_Closure)
                 (const SC2APIProtocol__RequestMapCommand *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__ResponseMapCommand_Closure)
                 (const SC2APIProtocol__ResponseMapCommand *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__RequestLeaveGame_Closure)
                 (const SC2APIProtocol__RequestLeaveGame *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__ResponseLeaveGame_Closure)
                 (const SC2APIProtocol__ResponseLeaveGame *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__RequestQuickSave_Closure)
                 (const SC2APIProtocol__RequestQuickSave *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__ResponseQuickSave_Closure)
                 (const SC2APIProtocol__ResponseQuickSave *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__RequestQuickLoad_Closure)
                 (const SC2APIProtocol__RequestQuickLoad *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__ResponseQuickLoad_Closure)
                 (const SC2APIProtocol__ResponseQuickLoad *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__RequestQuit_Closure)
                 (const SC2APIProtocol__RequestQuit *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__ResponseQuit_Closure)
                 (const SC2APIProtocol__ResponseQuit *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__RequestGameInfo_Closure)
                 (const SC2APIProtocol__RequestGameInfo *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__ResponseGameInfo_Closure)
                 (const SC2APIProtocol__ResponseGameInfo *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__RequestObservation_Closure)
                 (const SC2APIProtocol__RequestObservation *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__ResponseObservation_Closure)
                 (const SC2APIProtocol__ResponseObservation *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__ChatReceived_Closure)
                 (const SC2APIProtocol__ChatReceived *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__RequestAction_Closure)
                 (const SC2APIProtocol__RequestAction *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__ResponseAction_Closure)
                 (const SC2APIProtocol__ResponseAction *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__RequestObserverAction_Closure)
                 (const SC2APIProtocol__RequestObserverAction *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__ResponseObserverAction_Closure)
                 (const SC2APIProtocol__ResponseObserverAction *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__RequestStep_Closure)
                 (const SC2APIProtocol__RequestStep *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__ResponseStep_Closure)
                 (const SC2APIProtocol__ResponseStep *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__RequestData_Closure)
                 (const SC2APIProtocol__RequestData *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__ResponseData_Closure)
                 (const SC2APIProtocol__ResponseData *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__RequestSaveReplay_Closure)
                 (const SC2APIProtocol__RequestSaveReplay *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__ResponseSaveReplay_Closure)
                 (const SC2APIProtocol__ResponseSaveReplay *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__RequestReplayInfo_Closure)
                 (const SC2APIProtocol__RequestReplayInfo *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__PlayerInfoExtra_Closure)
                 (const SC2APIProtocol__PlayerInfoExtra *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__ResponseReplayInfo_Closure)
                 (const SC2APIProtocol__ResponseReplayInfo *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__RequestAvailableMaps_Closure)
                 (const SC2APIProtocol__RequestAvailableMaps *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__ResponseAvailableMaps_Closure)
                 (const SC2APIProtocol__ResponseAvailableMaps *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__RequestSaveMap_Closure)
                 (const SC2APIProtocol__RequestSaveMap *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__ResponseSaveMap_Closure)
                 (const SC2APIProtocol__ResponseSaveMap *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__RequestPing_Closure)
                 (const SC2APIProtocol__RequestPing *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__ResponsePing_Closure)
                 (const SC2APIProtocol__ResponsePing *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__RequestDebug_Closure)
                 (const SC2APIProtocol__RequestDebug *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__ResponseDebug_Closure)
                 (const SC2APIProtocol__ResponseDebug *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__PlayerSetup_Closure)
                 (const SC2APIProtocol__PlayerSetup *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__SpatialCameraSetup_Closure)
                 (const SC2APIProtocol__SpatialCameraSetup *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__InterfaceOptions_Closure)
                 (const SC2APIProtocol__InterfaceOptions *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__PlayerInfo_Closure)
                 (const SC2APIProtocol__PlayerInfo *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__PlayerCommon_Closure)
                 (const SC2APIProtocol__PlayerCommon *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__Observation_Closure)
                 (const SC2APIProtocol__Observation *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__Action_Closure)
                 (const SC2APIProtocol__Action *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__ActionChat_Closure)
                 (const SC2APIProtocol__ActionChat *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__ActionError_Closure)
                 (const SC2APIProtocol__ActionError *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__ObserverAction_Closure)
                 (const SC2APIProtocol__ObserverAction *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__ActionObserverPlayerPerspective_Closure)
                 (const SC2APIProtocol__ActionObserverPlayerPerspective *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__ActionObserverCameraMove_Closure)
                 (const SC2APIProtocol__ActionObserverCameraMove *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__ActionObserverCameraFollowPlayer_Closure)
                 (const SC2APIProtocol__ActionObserverCameraFollowPlayer *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__ActionObserverCameraFollowUnits_Closure)
                 (const SC2APIProtocol__ActionObserverCameraFollowUnits *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__PlayerResult_Closure)
                 (const SC2APIProtocol__PlayerResult *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    sc2_apiprotocol__status__descriptor;
extern const ProtobufCEnumDescriptor    sc2_apiprotocol__difficulty__descriptor;
extern const ProtobufCEnumDescriptor    sc2_apiprotocol__player_type__descriptor;
extern const ProtobufCEnumDescriptor    sc2_apiprotocol__aibuild__descriptor;
extern const ProtobufCEnumDescriptor    sc2_apiprotocol__alert__descriptor;
extern const ProtobufCEnumDescriptor    sc2_apiprotocol__result__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__request__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__response__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__request_create_game__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__local_map__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__response_create_game__descriptor;
extern const ProtobufCEnumDescriptor    sc2_apiprotocol__response_create_game__error__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__request_join_game__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__port_set__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__response_join_game__descriptor;
extern const ProtobufCEnumDescriptor    sc2_apiprotocol__response_join_game__error__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__request_restart_game__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__response_restart_game__descriptor;
extern const ProtobufCEnumDescriptor    sc2_apiprotocol__response_restart_game__error__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__request_start_replay__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__response_start_replay__descriptor;
extern const ProtobufCEnumDescriptor    sc2_apiprotocol__response_start_replay__error__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__request_map_command__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__response_map_command__descriptor;
extern const ProtobufCEnumDescriptor    sc2_apiprotocol__response_map_command__error__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__request_leave_game__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__response_leave_game__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__request_quick_save__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__response_quick_save__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__request_quick_load__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__response_quick_load__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__request_quit__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__response_quit__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__request_game_info__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__response_game_info__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__request_observation__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__response_observation__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__chat_received__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__request_action__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__response_action__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__request_observer_action__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__response_observer_action__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__request_step__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__response_step__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__request_data__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__response_data__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__request_save_replay__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__response_save_replay__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__request_replay_info__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__player_info_extra__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__response_replay_info__descriptor;
extern const ProtobufCEnumDescriptor    sc2_apiprotocol__response_replay_info__error__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__request_available_maps__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__response_available_maps__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__request_save_map__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__response_save_map__descriptor;
extern const ProtobufCEnumDescriptor    sc2_apiprotocol__response_save_map__error__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__request_ping__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__response_ping__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__request_debug__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__response_debug__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__player_setup__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__spatial_camera_setup__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__interface_options__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__player_info__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__player_common__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__observation__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__action__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__action_chat__descriptor;
extern const ProtobufCEnumDescriptor    sc2_apiprotocol__action_chat__channel__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__action_error__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__observer_action__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__action_observer_player_perspective__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__action_observer_camera_move__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__action_observer_camera_follow_player__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__action_observer_camera_follow_units__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__player_result__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_s2clientprotocol_2fsc2api_2eproto__INCLUDED */
