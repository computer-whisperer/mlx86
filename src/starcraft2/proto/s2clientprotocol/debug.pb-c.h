/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: s2clientprotocol/debug.proto */

#ifndef PROTOBUF_C_s2clientprotocol_2fdebug_2eproto__INCLUDED
#define PROTOBUF_C_s2clientprotocol_2fdebug_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "s2clientprotocol/common.pb-c.h"

typedef struct _SC2APIProtocol__DebugCommand SC2APIProtocol__DebugCommand;
typedef struct _SC2APIProtocol__DebugDraw SC2APIProtocol__DebugDraw;
typedef struct _SC2APIProtocol__Line SC2APIProtocol__Line;
typedef struct _SC2APIProtocol__Color SC2APIProtocol__Color;
typedef struct _SC2APIProtocol__DebugText SC2APIProtocol__DebugText;
typedef struct _SC2APIProtocol__DebugLine SC2APIProtocol__DebugLine;
typedef struct _SC2APIProtocol__DebugBox SC2APIProtocol__DebugBox;
typedef struct _SC2APIProtocol__DebugSphere SC2APIProtocol__DebugSphere;
typedef struct _SC2APIProtocol__DebugCreateUnit SC2APIProtocol__DebugCreateUnit;
typedef struct _SC2APIProtocol__DebugKillUnit SC2APIProtocol__DebugKillUnit;
typedef struct _SC2APIProtocol__DebugTestProcess SC2APIProtocol__DebugTestProcess;
typedef struct _SC2APIProtocol__DebugSetScore SC2APIProtocol__DebugSetScore;
typedef struct _SC2APIProtocol__DebugEndGame SC2APIProtocol__DebugEndGame;
typedef struct _SC2APIProtocol__DebugSetUnitValue SC2APIProtocol__DebugSetUnitValue;


/* --- enums --- */

typedef enum _SC2APIProtocol__DebugTestProcess__Test {
  SC2_APIPROTOCOL__DEBUG_TEST_PROCESS__TEST__hang = 1,
  SC2_APIPROTOCOL__DEBUG_TEST_PROCESS__TEST__crash = 2,
  SC2_APIPROTOCOL__DEBUG_TEST_PROCESS__TEST__exit = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SC2_APIPROTOCOL__DEBUG_TEST_PROCESS__TEST)
} SC2APIProtocol__DebugTestProcess__Test;
typedef enum _SC2APIProtocol__DebugEndGame__EndResult {
  /*
   * Default if nothing is set. The current player admits defeat.
   */
  SC2_APIPROTOCOL__DEBUG_END_GAME__END_RESULT__Surrender = 1,
  SC2_APIPROTOCOL__DEBUG_END_GAME__END_RESULT__DeclareVictory = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SC2_APIPROTOCOL__DEBUG_END_GAME__END_RESULT)
} SC2APIProtocol__DebugEndGame__EndResult;
typedef enum _SC2APIProtocol__DebugSetUnitValue__UnitValue {
  SC2_APIPROTOCOL__DEBUG_SET_UNIT_VALUE__UNIT_VALUE__Energy = 1,
  SC2_APIPROTOCOL__DEBUG_SET_UNIT_VALUE__UNIT_VALUE__Life = 2,
  SC2_APIPROTOCOL__DEBUG_SET_UNIT_VALUE__UNIT_VALUE__Shields = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SC2_APIPROTOCOL__DEBUG_SET_UNIT_VALUE__UNIT_VALUE)
} SC2APIProtocol__DebugSetUnitValue__UnitValue;
typedef enum _SC2APIProtocol__DebugGameState {
  SC2_APIPROTOCOL__DEBUG_GAME_STATE__show_map = 1,
  SC2_APIPROTOCOL__DEBUG_GAME_STATE__control_enemy = 2,
  SC2_APIPROTOCOL__DEBUG_GAME_STATE__food = 3,
  SC2_APIPROTOCOL__DEBUG_GAME_STATE__free = 4,
  SC2_APIPROTOCOL__DEBUG_GAME_STATE__all_resources = 5,
  SC2_APIPROTOCOL__DEBUG_GAME_STATE__god = 6,
  SC2_APIPROTOCOL__DEBUG_GAME_STATE__minerals = 7,
  SC2_APIPROTOCOL__DEBUG_GAME_STATE__gas = 8,
  SC2_APIPROTOCOL__DEBUG_GAME_STATE__cooldown = 9,
  SC2_APIPROTOCOL__DEBUG_GAME_STATE__tech_tree = 10,
  SC2_APIPROTOCOL__DEBUG_GAME_STATE__upgrade = 11,
  SC2_APIPROTOCOL__DEBUG_GAME_STATE__fast_build = 12
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SC2_APIPROTOCOL__DEBUG_GAME_STATE)
} SC2APIProtocol__DebugGameState;

/* --- messages --- */

typedef enum {
  SC2_APIPROTOCOL__DEBUG_COMMAND__COMMAND__NOT_SET = 0,
  SC2_APIPROTOCOL__DEBUG_COMMAND__COMMAND_DRAW = 1,
  SC2_APIPROTOCOL__DEBUG_COMMAND__COMMAND_GAME_STATE = 2,
  SC2_APIPROTOCOL__DEBUG_COMMAND__COMMAND_CREATE_UNIT = 3,
  SC2_APIPROTOCOL__DEBUG_COMMAND__COMMAND_KILL_UNIT = 4,
  SC2_APIPROTOCOL__DEBUG_COMMAND__COMMAND_TEST_PROCESS = 5,
  SC2_APIPROTOCOL__DEBUG_COMMAND__COMMAND_SCORE = 6,
  SC2_APIPROTOCOL__DEBUG_COMMAND__COMMAND_END_GAME = 7,
  SC2_APIPROTOCOL__DEBUG_COMMAND__COMMAND_UNIT_VALUE = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SC2_APIPROTOCOL__DEBUG_COMMAND__COMMAND)
} SC2APIProtocol__DebugCommand__CommandCase;

/*
 * Issue various useful commands to the game engine.
 */
struct  _SC2APIProtocol__DebugCommand
{
  ProtobufCMessage base;
  SC2APIProtocol__DebugCommand__CommandCase command_case;
  union {
    SC2APIProtocol__DebugDraw *draw;
    SC2APIProtocol__DebugGameState game_state;
    SC2APIProtocol__DebugCreateUnit *create_unit;
    SC2APIProtocol__DebugKillUnit *kill_unit;
    SC2APIProtocol__DebugTestProcess *test_process;
    /*
     * Useful only for single-player "curriculum" maps.
     */
    SC2APIProtocol__DebugSetScore *score;
    SC2APIProtocol__DebugEndGame *end_game;
    SC2APIProtocol__DebugSetUnitValue *unit_value;
  };
};
#define SC2_APIPROTOCOL__DEBUG_COMMAND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__debug_command__descriptor) \
    , SC2_APIPROTOCOL__DEBUG_COMMAND__COMMAND__NOT_SET, {0} }


struct  _SC2APIProtocol__DebugDraw
{
  ProtobufCMessage base;
  size_t n_text;
  SC2APIProtocol__DebugText **text;
  size_t n_lines;
  SC2APIProtocol__DebugLine **lines;
  size_t n_boxes;
  SC2APIProtocol__DebugBox **boxes;
  size_t n_spheres;
  SC2APIProtocol__DebugSphere **spheres;
};
#define SC2_APIPROTOCOL__DEBUG_DRAW__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__debug_draw__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL, 0,NULL }


struct  _SC2APIProtocol__Line
{
  ProtobufCMessage base;
  SC2APIProtocol__Point *p0;
  SC2APIProtocol__Point *p1;
};
#define SC2_APIPROTOCOL__LINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__line__descriptor) \
    , NULL, NULL }


struct  _SC2APIProtocol__Color
{
  ProtobufCMessage base;
  protobuf_c_boolean has_r;
  uint32_t r;
  protobuf_c_boolean has_g;
  uint32_t g;
  protobuf_c_boolean has_b;
  uint32_t b;
};
#define SC2_APIPROTOCOL__COLOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__color__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


/*
 * Display debug text on screen.
 */
struct  _SC2APIProtocol__DebugText
{
  ProtobufCMessage base;
  SC2APIProtocol__Color *color;
  /*
   * Text to display.
   */
  char *text;
  /*
   * Virtualized position in 2D (the screen is 0..1, 0..1 for any resolution).
   */
  SC2APIProtocol__Point *virtual_pos;
  /*
   * Position in the world.
   */
  SC2APIProtocol__Point *world_pos;
  /*
   * Pixel height of the text. Defaults to 8px.
   */
  protobuf_c_boolean has_size;
  uint32_t size;
};
#define SC2_APIPROTOCOL__DEBUG_TEXT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__debug_text__descriptor) \
    , NULL, NULL, NULL, NULL, 0, 0 }


/*
 * Display debug lines on screen.
 */
struct  _SC2APIProtocol__DebugLine
{
  ProtobufCMessage base;
  SC2APIProtocol__Color *color;
  /*
   * World space line.
   */
  SC2APIProtocol__Line *line;
};
#define SC2_APIPROTOCOL__DEBUG_LINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__debug_line__descriptor) \
    , NULL, NULL }


/*
 * Display debug boxes on screen.
 */
struct  _SC2APIProtocol__DebugBox
{
  ProtobufCMessage base;
  SC2APIProtocol__Color *color;
  SC2APIProtocol__Point *min;
  SC2APIProtocol__Point *max;
};
#define SC2_APIPROTOCOL__DEBUG_BOX__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__debug_box__descriptor) \
    , NULL, NULL, NULL }


/*
 * Display debug spheres on screen.
 */
struct  _SC2APIProtocol__DebugSphere
{
  ProtobufCMessage base;
  SC2APIProtocol__Color *color;
  SC2APIProtocol__Point *p;
  protobuf_c_boolean has_r;
  float r;
};
#define SC2_APIPROTOCOL__DEBUG_SPHERE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__debug_sphere__descriptor) \
    , NULL, NULL, 0, 0 }


struct  _SC2APIProtocol__DebugCreateUnit
{
  ProtobufCMessage base;
  protobuf_c_boolean has_unit_type;
  uint32_t unit_type;
  protobuf_c_boolean has_owner;
  int32_t owner;
  SC2APIProtocol__Point2D *pos;
  protobuf_c_boolean has_quantity;
  uint32_t quantity;
};
#define SC2_APIPROTOCOL__DEBUG_CREATE_UNIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__debug_create_unit__descriptor) \
    , 0, 0, 0, 0, NULL, 0, 0 }


struct  _SC2APIProtocol__DebugKillUnit
{
  ProtobufCMessage base;
  size_t n_tag;
  uint64_t *tag;
};
#define SC2_APIPROTOCOL__DEBUG_KILL_UNIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__debug_kill_unit__descriptor) \
    , 0,NULL }


struct  _SC2APIProtocol__DebugTestProcess
{
  ProtobufCMessage base;
  protobuf_c_boolean has_test;
  SC2APIProtocol__DebugTestProcess__Test test;
  protobuf_c_boolean has_delay_ms;
  int32_t delay_ms;
};
#define SC2_APIPROTOCOL__DEBUG_TEST_PROCESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__debug_test_process__descriptor) \
    , 0, SC2_APIPROTOCOL__DEBUG_TEST_PROCESS__TEST__hang, 0, 0 }


struct  _SC2APIProtocol__DebugSetScore
{
  ProtobufCMessage base;
  protobuf_c_boolean has_score;
  float score;
};
#define SC2_APIPROTOCOL__DEBUG_SET_SCORE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__debug_set_score__descriptor) \
    , 0, 0 }


struct  _SC2APIProtocol__DebugEndGame
{
  ProtobufCMessage base;
  protobuf_c_boolean has_end_result;
  SC2APIProtocol__DebugEndGame__EndResult end_result;
};
#define SC2_APIPROTOCOL__DEBUG_END_GAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__debug_end_game__descriptor) \
    , 0, SC2_APIPROTOCOL__DEBUG_END_GAME__END_RESULT__Surrender }


struct  _SC2APIProtocol__DebugSetUnitValue
{
  ProtobufCMessage base;
  protobuf_c_boolean has_unit_value;
  SC2APIProtocol__DebugSetUnitValue__UnitValue unit_value;
  protobuf_c_boolean has_value;
  float value;
  protobuf_c_boolean has_unit_tag;
  uint64_t unit_tag;
};
#define SC2_APIPROTOCOL__DEBUG_SET_UNIT_VALUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__debug_set_unit_value__descriptor) \
    , 0, SC2_APIPROTOCOL__DEBUG_SET_UNIT_VALUE__UNIT_VALUE__Energy, 0, 0, 0, 0 }


/* SC2APIProtocol__DebugCommand methods */
void   sc2_apiprotocol__debug_command__init
                     (SC2APIProtocol__DebugCommand         *message);
size_t sc2_apiprotocol__debug_command__get_packed_size
                     (const SC2APIProtocol__DebugCommand   *message);
size_t sc2_apiprotocol__debug_command__pack
                     (const SC2APIProtocol__DebugCommand   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__debug_command__pack_to_buffer
                     (const SC2APIProtocol__DebugCommand   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__DebugCommand *
       sc2_apiprotocol__debug_command__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__debug_command__free_unpacked
                     (SC2APIProtocol__DebugCommand *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__DebugDraw methods */
void   sc2_apiprotocol__debug_draw__init
                     (SC2APIProtocol__DebugDraw         *message);
size_t sc2_apiprotocol__debug_draw__get_packed_size
                     (const SC2APIProtocol__DebugDraw   *message);
size_t sc2_apiprotocol__debug_draw__pack
                     (const SC2APIProtocol__DebugDraw   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__debug_draw__pack_to_buffer
                     (const SC2APIProtocol__DebugDraw   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__DebugDraw *
       sc2_apiprotocol__debug_draw__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__debug_draw__free_unpacked
                     (SC2APIProtocol__DebugDraw *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__Line methods */
void   sc2_apiprotocol__line__init
                     (SC2APIProtocol__Line         *message);
size_t sc2_apiprotocol__line__get_packed_size
                     (const SC2APIProtocol__Line   *message);
size_t sc2_apiprotocol__line__pack
                     (const SC2APIProtocol__Line   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__line__pack_to_buffer
                     (const SC2APIProtocol__Line   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__Line *
       sc2_apiprotocol__line__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__line__free_unpacked
                     (SC2APIProtocol__Line *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__Color methods */
void   sc2_apiprotocol__color__init
                     (SC2APIProtocol__Color         *message);
size_t sc2_apiprotocol__color__get_packed_size
                     (const SC2APIProtocol__Color   *message);
size_t sc2_apiprotocol__color__pack
                     (const SC2APIProtocol__Color   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__color__pack_to_buffer
                     (const SC2APIProtocol__Color   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__Color *
       sc2_apiprotocol__color__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__color__free_unpacked
                     (SC2APIProtocol__Color *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__DebugText methods */
void   sc2_apiprotocol__debug_text__init
                     (SC2APIProtocol__DebugText         *message);
size_t sc2_apiprotocol__debug_text__get_packed_size
                     (const SC2APIProtocol__DebugText   *message);
size_t sc2_apiprotocol__debug_text__pack
                     (const SC2APIProtocol__DebugText   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__debug_text__pack_to_buffer
                     (const SC2APIProtocol__DebugText   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__DebugText *
       sc2_apiprotocol__debug_text__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__debug_text__free_unpacked
                     (SC2APIProtocol__DebugText *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__DebugLine methods */
void   sc2_apiprotocol__debug_line__init
                     (SC2APIProtocol__DebugLine         *message);
size_t sc2_apiprotocol__debug_line__get_packed_size
                     (const SC2APIProtocol__DebugLine   *message);
size_t sc2_apiprotocol__debug_line__pack
                     (const SC2APIProtocol__DebugLine   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__debug_line__pack_to_buffer
                     (const SC2APIProtocol__DebugLine   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__DebugLine *
       sc2_apiprotocol__debug_line__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__debug_line__free_unpacked
                     (SC2APIProtocol__DebugLine *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__DebugBox methods */
void   sc2_apiprotocol__debug_box__init
                     (SC2APIProtocol__DebugBox         *message);
size_t sc2_apiprotocol__debug_box__get_packed_size
                     (const SC2APIProtocol__DebugBox   *message);
size_t sc2_apiprotocol__debug_box__pack
                     (const SC2APIProtocol__DebugBox   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__debug_box__pack_to_buffer
                     (const SC2APIProtocol__DebugBox   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__DebugBox *
       sc2_apiprotocol__debug_box__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__debug_box__free_unpacked
                     (SC2APIProtocol__DebugBox *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__DebugSphere methods */
void   sc2_apiprotocol__debug_sphere__init
                     (SC2APIProtocol__DebugSphere         *message);
size_t sc2_apiprotocol__debug_sphere__get_packed_size
                     (const SC2APIProtocol__DebugSphere   *message);
size_t sc2_apiprotocol__debug_sphere__pack
                     (const SC2APIProtocol__DebugSphere   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__debug_sphere__pack_to_buffer
                     (const SC2APIProtocol__DebugSphere   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__DebugSphere *
       sc2_apiprotocol__debug_sphere__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__debug_sphere__free_unpacked
                     (SC2APIProtocol__DebugSphere *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__DebugCreateUnit methods */
void   sc2_apiprotocol__debug_create_unit__init
                     (SC2APIProtocol__DebugCreateUnit         *message);
size_t sc2_apiprotocol__debug_create_unit__get_packed_size
                     (const SC2APIProtocol__DebugCreateUnit   *message);
size_t sc2_apiprotocol__debug_create_unit__pack
                     (const SC2APIProtocol__DebugCreateUnit   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__debug_create_unit__pack_to_buffer
                     (const SC2APIProtocol__DebugCreateUnit   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__DebugCreateUnit *
       sc2_apiprotocol__debug_create_unit__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__debug_create_unit__free_unpacked
                     (SC2APIProtocol__DebugCreateUnit *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__DebugKillUnit methods */
void   sc2_apiprotocol__debug_kill_unit__init
                     (SC2APIProtocol__DebugKillUnit         *message);
size_t sc2_apiprotocol__debug_kill_unit__get_packed_size
                     (const SC2APIProtocol__DebugKillUnit   *message);
size_t sc2_apiprotocol__debug_kill_unit__pack
                     (const SC2APIProtocol__DebugKillUnit   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__debug_kill_unit__pack_to_buffer
                     (const SC2APIProtocol__DebugKillUnit   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__DebugKillUnit *
       sc2_apiprotocol__debug_kill_unit__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__debug_kill_unit__free_unpacked
                     (SC2APIProtocol__DebugKillUnit *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__DebugTestProcess methods */
void   sc2_apiprotocol__debug_test_process__init
                     (SC2APIProtocol__DebugTestProcess         *message);
size_t sc2_apiprotocol__debug_test_process__get_packed_size
                     (const SC2APIProtocol__DebugTestProcess   *message);
size_t sc2_apiprotocol__debug_test_process__pack
                     (const SC2APIProtocol__DebugTestProcess   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__debug_test_process__pack_to_buffer
                     (const SC2APIProtocol__DebugTestProcess   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__DebugTestProcess *
       sc2_apiprotocol__debug_test_process__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__debug_test_process__free_unpacked
                     (SC2APIProtocol__DebugTestProcess *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__DebugSetScore methods */
void   sc2_apiprotocol__debug_set_score__init
                     (SC2APIProtocol__DebugSetScore         *message);
size_t sc2_apiprotocol__debug_set_score__get_packed_size
                     (const SC2APIProtocol__DebugSetScore   *message);
size_t sc2_apiprotocol__debug_set_score__pack
                     (const SC2APIProtocol__DebugSetScore   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__debug_set_score__pack_to_buffer
                     (const SC2APIProtocol__DebugSetScore   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__DebugSetScore *
       sc2_apiprotocol__debug_set_score__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__debug_set_score__free_unpacked
                     (SC2APIProtocol__DebugSetScore *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__DebugEndGame methods */
void   sc2_apiprotocol__debug_end_game__init
                     (SC2APIProtocol__DebugEndGame         *message);
size_t sc2_apiprotocol__debug_end_game__get_packed_size
                     (const SC2APIProtocol__DebugEndGame   *message);
size_t sc2_apiprotocol__debug_end_game__pack
                     (const SC2APIProtocol__DebugEndGame   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__debug_end_game__pack_to_buffer
                     (const SC2APIProtocol__DebugEndGame   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__DebugEndGame *
       sc2_apiprotocol__debug_end_game__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__debug_end_game__free_unpacked
                     (SC2APIProtocol__DebugEndGame *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__DebugSetUnitValue methods */
void   sc2_apiprotocol__debug_set_unit_value__init
                     (SC2APIProtocol__DebugSetUnitValue         *message);
size_t sc2_apiprotocol__debug_set_unit_value__get_packed_size
                     (const SC2APIProtocol__DebugSetUnitValue   *message);
size_t sc2_apiprotocol__debug_set_unit_value__pack
                     (const SC2APIProtocol__DebugSetUnitValue   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__debug_set_unit_value__pack_to_buffer
                     (const SC2APIProtocol__DebugSetUnitValue   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__DebugSetUnitValue *
       sc2_apiprotocol__debug_set_unit_value__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__debug_set_unit_value__free_unpacked
                     (SC2APIProtocol__DebugSetUnitValue *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*SC2APIProtocol__DebugCommand_Closure)
                 (const SC2APIProtocol__DebugCommand *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__DebugDraw_Closure)
                 (const SC2APIProtocol__DebugDraw *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__Line_Closure)
                 (const SC2APIProtocol__Line *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__Color_Closure)
                 (const SC2APIProtocol__Color *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__DebugText_Closure)
                 (const SC2APIProtocol__DebugText *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__DebugLine_Closure)
                 (const SC2APIProtocol__DebugLine *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__DebugBox_Closure)
                 (const SC2APIProtocol__DebugBox *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__DebugSphere_Closure)
                 (const SC2APIProtocol__DebugSphere *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__DebugCreateUnit_Closure)
                 (const SC2APIProtocol__DebugCreateUnit *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__DebugKillUnit_Closure)
                 (const SC2APIProtocol__DebugKillUnit *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__DebugTestProcess_Closure)
                 (const SC2APIProtocol__DebugTestProcess *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__DebugSetScore_Closure)
                 (const SC2APIProtocol__DebugSetScore *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__DebugEndGame_Closure)
                 (const SC2APIProtocol__DebugEndGame *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__DebugSetUnitValue_Closure)
                 (const SC2APIProtocol__DebugSetUnitValue *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    sc2_apiprotocol__debug_game_state__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__debug_command__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__debug_draw__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__line__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__color__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__debug_text__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__debug_line__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__debug_box__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__debug_sphere__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__debug_create_unit__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__debug_kill_unit__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__debug_test_process__descriptor;
extern const ProtobufCEnumDescriptor    sc2_apiprotocol__debug_test_process__test__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__debug_set_score__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__debug_end_game__descriptor;
extern const ProtobufCEnumDescriptor    sc2_apiprotocol__debug_end_game__end_result__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__debug_set_unit_value__descriptor;
extern const ProtobufCEnumDescriptor    sc2_apiprotocol__debug_set_unit_value__unit_value__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_s2clientprotocol_2fdebug_2eproto__INCLUDED */
