/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: s2clientprotocol/spatial.proto */

#ifndef PROTOBUF_C_s2clientprotocol_2fspatial_2eproto__INCLUDED
#define PROTOBUF_C_s2clientprotocol_2fspatial_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "s2clientprotocol/common.pb-c.h"

typedef struct _SC2APIProtocol__ObservationFeatureLayer SC2APIProtocol__ObservationFeatureLayer;
typedef struct _SC2APIProtocol__FeatureLayers SC2APIProtocol__FeatureLayers;
typedef struct _SC2APIProtocol__FeatureLayersMinimap SC2APIProtocol__FeatureLayersMinimap;
typedef struct _SC2APIProtocol__ObservationRender SC2APIProtocol__ObservationRender;
typedef struct _SC2APIProtocol__ActionSpatial SC2APIProtocol__ActionSpatial;
typedef struct _SC2APIProtocol__ActionSpatialUnitCommand SC2APIProtocol__ActionSpatialUnitCommand;
typedef struct _SC2APIProtocol__ActionSpatialCameraMove SC2APIProtocol__ActionSpatialCameraMove;
typedef struct _SC2APIProtocol__ActionSpatialUnitSelectionPoint SC2APIProtocol__ActionSpatialUnitSelectionPoint;
typedef struct _SC2APIProtocol__ActionSpatialUnitSelectionRect SC2APIProtocol__ActionSpatialUnitSelectionRect;


/* --- enums --- */

typedef enum _SC2APIProtocol__ActionSpatialUnitSelectionPoint__Type {
  /*
   * Equivalent to normal click. Changes selection to unit.
   */
  SC2_APIPROTOCOL__ACTION_SPATIAL_UNIT_SELECTION_POINT__TYPE__Select = 1,
  /*
   * Equivalent to shift+click. Toggle selection of unit.
   */
  SC2_APIPROTOCOL__ACTION_SPATIAL_UNIT_SELECTION_POINT__TYPE__Toggle = 2,
  /*
   * Equivalent to control+click. Selects all units of a given type.
   */
  SC2_APIPROTOCOL__ACTION_SPATIAL_UNIT_SELECTION_POINT__TYPE__AllType = 3,
  /*
   * Equivalent to shift+control+click. Selects all units of a given type.
   */
  SC2_APIPROTOCOL__ACTION_SPATIAL_UNIT_SELECTION_POINT__TYPE__AddAllType = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SC2_APIPROTOCOL__ACTION_SPATIAL_UNIT_SELECTION_POINT__TYPE)
} SC2APIProtocol__ActionSpatialUnitSelectionPoint__Type;

/* --- messages --- */

struct  _SC2APIProtocol__ObservationFeatureLayer
{
  ProtobufCMessage base;
  SC2APIProtocol__FeatureLayers *renders;
  SC2APIProtocol__FeatureLayersMinimap *minimap_renders;
};
#define SC2_APIPROTOCOL__OBSERVATION_FEATURE_LAYER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__observation_feature_layer__descriptor) \
    , NULL, NULL }


struct  _SC2APIProtocol__FeatureLayers
{
  ProtobufCMessage base;
  /*
   * uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
   */
  SC2APIProtocol__ImageData *height_map;
  /*
   * uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
   */
  SC2APIProtocol__ImageData *visibility_map;
  /*
   * 1-bit. Zerg creep.
   */
  SC2APIProtocol__ImageData *creep;
  /*
   * 1-bit. Protoss power.
   */
  SC2APIProtocol__ImageData *power;
  /*
   * uint8. Participants: [1, 15] Neutral: 16
   */
  SC2APIProtocol__ImageData *player_id;
  /*
   * int32. Unique identifier for type of unit.
   */
  SC2APIProtocol__ImageData *unit_type;
  /*
   * 1-bit. Selected units.
   */
  SC2APIProtocol__ImageData *selected;
  /*
   * int32.
   */
  SC2APIProtocol__ImageData *unit_hit_points;
  /*
   * uint8. Ratio of current health to max health. [0%, 100%] encoded into [0, 255].
   */
  SC2APIProtocol__ImageData *unit_hit_points_ratio;
  /*
   * int32.
   */
  SC2APIProtocol__ImageData *unit_energy;
  /*
   * uint8. Ratio of current energy to max energy. [0%, 100%] encoded into [0, 255].
   */
  SC2APIProtocol__ImageData *unit_energy_ratio;
  /*
   * int32.
   */
  SC2APIProtocol__ImageData *unit_shields;
  /*
   * uint8. Ratio of current shields to max shields. [0%, 100%] encoded into [0, 255].
   */
  SC2APIProtocol__ImageData *unit_shields_ratio;
  /*
   * uint8. See "Alliance" enum in raw.proto. Range: [1, 4] 
   */
  SC2APIProtocol__ImageData *player_relative;
  /*
   * uint8. Density of units overlapping a pixel, anti-aliased. [0.0, 16.0f] encoded into [0, 255].
   */
  SC2APIProtocol__ImageData *unit_density_aa;
  /*
   * uint8. Count of units overlapping a pixel.
   */
  SC2APIProtocol__ImageData *unit_density;
  /*
   * uint8. Visuals of persistent abilities. (eg. Psistorm)
   */
  SC2APIProtocol__ImageData *effects;
  /*
   * 1-bit. Whether the unit here is a hallucination.
   */
  SC2APIProtocol__ImageData *hallucinations;
  /*
   * 1-bit. Whether the unit here is cloaked. Hidden units will show up too, but with less details in other layers.
   */
  SC2APIProtocol__ImageData *cloaked;
  /*
   * 1-bit. Whether the unit here is a blip.
   */
  SC2APIProtocol__ImageData *blip;
  /*
   * int32. One of the buffs applied to this unit. Extras are ignored.
   */
  SC2APIProtocol__ImageData *buffs;
  /*
   * uint8. Ratio of buff remaining. [0%, 100%] encoded into [0, 255].
   */
  SC2APIProtocol__ImageData *buff_duration;
  /*
   * 1-bit. Whether the unit here is active.
   */
  SC2APIProtocol__ImageData *active;
  /*
   * uint8. How far along the building is building something. [0%, 100%] encoded into [0, 255].
   */
  SC2APIProtocol__ImageData *build_progress;
  /*
   * 1-bit. Whether a building can be built here.
   */
  SC2APIProtocol__ImageData *buildable;
  /*
   * 1-bit. Whether a unit can walk here.
   */
  SC2APIProtocol__ImageData *pathable;
  /*
   * 1-bit. Whether the unit here is a placeholder building to be constructed.
   */
  SC2APIProtocol__ImageData *placeholder;
};
#define SC2_APIPROTOCOL__FEATURE_LAYERS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__feature_layers__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


struct  _SC2APIProtocol__FeatureLayersMinimap
{
  ProtobufCMessage base;
  /*
   * uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
   */
  SC2APIProtocol__ImageData *height_map;
  /*
   * uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
   */
  SC2APIProtocol__ImageData *visibility_map;
  /*
   * 1-bit. Zerg creep.
   */
  SC2APIProtocol__ImageData *creep;
  /*
   * 1-bit. Area covered by the camera.
   */
  SC2APIProtocol__ImageData *camera;
  /*
   * uint8. Participants: [1, 15] Neutral: 16
   */
  SC2APIProtocol__ImageData *player_id;
  /*
   * uint8. See "Alliance" enum in raw.proto. Range: [1, 4] 
   */
  SC2APIProtocol__ImageData *player_relative;
  /*
   * 1-bit. Selected units.
   */
  SC2APIProtocol__ImageData *selected;
  /*
   * 1-bit. Shows 'UnitAttacked' alert location.
   */
  SC2APIProtocol__ImageData *alerts;
  /*
   * 1-bit. Whether a building can be built here.
   */
  SC2APIProtocol__ImageData *buildable;
  /*
   * 1-bit. Whether a unit can walk here.
   */
  SC2APIProtocol__ImageData *pathable;
  /*
   * Cheat layers, enable with SpatialCameraSetup.allow_cheating_layers.
   */
  /*
   * int32. Unique identifier for type of unit.
   */
  SC2APIProtocol__ImageData *unit_type;
};
#define SC2_APIPROTOCOL__FEATURE_LAYERS_MINIMAP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__feature_layers_minimap__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


struct  _SC2APIProtocol__ObservationRender
{
  ProtobufCMessage base;
  SC2APIProtocol__ImageData *map;
  SC2APIProtocol__ImageData *minimap;
};
#define SC2_APIPROTOCOL__OBSERVATION_RENDER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__observation_render__descriptor) \
    , NULL, NULL }


typedef enum {
  SC2_APIPROTOCOL__ACTION_SPATIAL__ACTION__NOT_SET = 0,
  SC2_APIPROTOCOL__ACTION_SPATIAL__ACTION_UNIT_COMMAND = 1,
  SC2_APIPROTOCOL__ACTION_SPATIAL__ACTION_CAMERA_MOVE = 2,
  SC2_APIPROTOCOL__ACTION_SPATIAL__ACTION_UNIT_SELECTION_POINT = 3,
  SC2_APIPROTOCOL__ACTION_SPATIAL__ACTION_UNIT_SELECTION_RECT = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SC2_APIPROTOCOL__ACTION_SPATIAL__ACTION)
} SC2APIProtocol__ActionSpatial__ActionCase;

struct  _SC2APIProtocol__ActionSpatial
{
  ProtobufCMessage base;
  SC2APIProtocol__ActionSpatial__ActionCase action_case;
  union {
    SC2APIProtocol__ActionSpatialUnitCommand *unit_command;
    SC2APIProtocol__ActionSpatialCameraMove *camera_move;
    SC2APIProtocol__ActionSpatialUnitSelectionPoint *unit_selection_point;
    SC2APIProtocol__ActionSpatialUnitSelectionRect *unit_selection_rect;
  };
};
#define SC2_APIPROTOCOL__ACTION_SPATIAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__action_spatial__descriptor) \
    , SC2_APIPROTOCOL__ACTION_SPATIAL__ACTION__NOT_SET, {0} }


typedef enum {
  SC2_APIPROTOCOL__ACTION_SPATIAL_UNIT_COMMAND__TARGET__NOT_SET = 0,
  SC2_APIPROTOCOL__ACTION_SPATIAL_UNIT_COMMAND__TARGET_TARGET_SCREEN_COORD = 2,
  SC2_APIPROTOCOL__ACTION_SPATIAL_UNIT_COMMAND__TARGET_TARGET_MINIMAP_COORD = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SC2_APIPROTOCOL__ACTION_SPATIAL_UNIT_COMMAND__TARGET)
} SC2APIProtocol__ActionSpatialUnitCommand__TargetCase;

struct  _SC2APIProtocol__ActionSpatialUnitCommand
{
  ProtobufCMessage base;
  protobuf_c_boolean has_ability_id;
  int32_t ability_id;
  /*
   * Equivalent to shift+command.
   */
  protobuf_c_boolean has_queue_command;
  protobuf_c_boolean queue_command;
  SC2APIProtocol__ActionSpatialUnitCommand__TargetCase target_case;
  union {
    SC2APIProtocol__PointI *target_screen_coord;
    SC2APIProtocol__PointI *target_minimap_coord;
  };
};
#define SC2_APIPROTOCOL__ACTION_SPATIAL_UNIT_COMMAND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__action_spatial_unit_command__descriptor) \
    , 0, 0, 0, 0, SC2_APIPROTOCOL__ACTION_SPATIAL_UNIT_COMMAND__TARGET__NOT_SET, {0} }


struct  _SC2APIProtocol__ActionSpatialCameraMove
{
  ProtobufCMessage base;
  /*
   * Simulates a click on the minimap to move the camera.
   */
  SC2APIProtocol__PointI *center_minimap;
};
#define SC2_APIPROTOCOL__ACTION_SPATIAL_CAMERA_MOVE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__action_spatial_camera_move__descriptor) \
    , NULL }


struct  _SC2APIProtocol__ActionSpatialUnitSelectionPoint
{
  ProtobufCMessage base;
  SC2APIProtocol__PointI *selection_screen_coord;
  protobuf_c_boolean has_type;
  SC2APIProtocol__ActionSpatialUnitSelectionPoint__Type type;
};
#define SC2_APIPROTOCOL__ACTION_SPATIAL_UNIT_SELECTION_POINT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__action_spatial_unit_selection_point__descriptor) \
    , NULL, 0, SC2_APIPROTOCOL__ACTION_SPATIAL_UNIT_SELECTION_POINT__TYPE__Select }


struct  _SC2APIProtocol__ActionSpatialUnitSelectionRect
{
  ProtobufCMessage base;
  /*
   * Eventually this should not be an array, but a single field (multiple would be cheating).
   */
  size_t n_selection_screen_coord;
  SC2APIProtocol__RectangleI **selection_screen_coord;
  /*
   * Equivalent to shift+drag. Adds units to selection.
   */
  protobuf_c_boolean has_selection_add;
  protobuf_c_boolean selection_add;
};
#define SC2_APIPROTOCOL__ACTION_SPATIAL_UNIT_SELECTION_RECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__action_spatial_unit_selection_rect__descriptor) \
    , 0,NULL, 0, 0 }


/* SC2APIProtocol__ObservationFeatureLayer methods */
void   sc2_apiprotocol__observation_feature_layer__init
                     (SC2APIProtocol__ObservationFeatureLayer         *message);
size_t sc2_apiprotocol__observation_feature_layer__get_packed_size
                     (const SC2APIProtocol__ObservationFeatureLayer   *message);
size_t sc2_apiprotocol__observation_feature_layer__pack
                     (const SC2APIProtocol__ObservationFeatureLayer   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__observation_feature_layer__pack_to_buffer
                     (const SC2APIProtocol__ObservationFeatureLayer   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ObservationFeatureLayer *
       sc2_apiprotocol__observation_feature_layer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__observation_feature_layer__free_unpacked
                     (SC2APIProtocol__ObservationFeatureLayer *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__FeatureLayers methods */
void   sc2_apiprotocol__feature_layers__init
                     (SC2APIProtocol__FeatureLayers         *message);
size_t sc2_apiprotocol__feature_layers__get_packed_size
                     (const SC2APIProtocol__FeatureLayers   *message);
size_t sc2_apiprotocol__feature_layers__pack
                     (const SC2APIProtocol__FeatureLayers   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__feature_layers__pack_to_buffer
                     (const SC2APIProtocol__FeatureLayers   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__FeatureLayers *
       sc2_apiprotocol__feature_layers__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__feature_layers__free_unpacked
                     (SC2APIProtocol__FeatureLayers *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__FeatureLayersMinimap methods */
void   sc2_apiprotocol__feature_layers_minimap__init
                     (SC2APIProtocol__FeatureLayersMinimap         *message);
size_t sc2_apiprotocol__feature_layers_minimap__get_packed_size
                     (const SC2APIProtocol__FeatureLayersMinimap   *message);
size_t sc2_apiprotocol__feature_layers_minimap__pack
                     (const SC2APIProtocol__FeatureLayersMinimap   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__feature_layers_minimap__pack_to_buffer
                     (const SC2APIProtocol__FeatureLayersMinimap   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__FeatureLayersMinimap *
       sc2_apiprotocol__feature_layers_minimap__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__feature_layers_minimap__free_unpacked
                     (SC2APIProtocol__FeatureLayersMinimap *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__ObservationRender methods */
void   sc2_apiprotocol__observation_render__init
                     (SC2APIProtocol__ObservationRender         *message);
size_t sc2_apiprotocol__observation_render__get_packed_size
                     (const SC2APIProtocol__ObservationRender   *message);
size_t sc2_apiprotocol__observation_render__pack
                     (const SC2APIProtocol__ObservationRender   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__observation_render__pack_to_buffer
                     (const SC2APIProtocol__ObservationRender   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ObservationRender *
       sc2_apiprotocol__observation_render__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__observation_render__free_unpacked
                     (SC2APIProtocol__ObservationRender *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__ActionSpatial methods */
void   sc2_apiprotocol__action_spatial__init
                     (SC2APIProtocol__ActionSpatial         *message);
size_t sc2_apiprotocol__action_spatial__get_packed_size
                     (const SC2APIProtocol__ActionSpatial   *message);
size_t sc2_apiprotocol__action_spatial__pack
                     (const SC2APIProtocol__ActionSpatial   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__action_spatial__pack_to_buffer
                     (const SC2APIProtocol__ActionSpatial   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ActionSpatial *
       sc2_apiprotocol__action_spatial__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__action_spatial__free_unpacked
                     (SC2APIProtocol__ActionSpatial *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__ActionSpatialUnitCommand methods */
void   sc2_apiprotocol__action_spatial_unit_command__init
                     (SC2APIProtocol__ActionSpatialUnitCommand         *message);
size_t sc2_apiprotocol__action_spatial_unit_command__get_packed_size
                     (const SC2APIProtocol__ActionSpatialUnitCommand   *message);
size_t sc2_apiprotocol__action_spatial_unit_command__pack
                     (const SC2APIProtocol__ActionSpatialUnitCommand   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__action_spatial_unit_command__pack_to_buffer
                     (const SC2APIProtocol__ActionSpatialUnitCommand   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ActionSpatialUnitCommand *
       sc2_apiprotocol__action_spatial_unit_command__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__action_spatial_unit_command__free_unpacked
                     (SC2APIProtocol__ActionSpatialUnitCommand *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__ActionSpatialCameraMove methods */
void   sc2_apiprotocol__action_spatial_camera_move__init
                     (SC2APIProtocol__ActionSpatialCameraMove         *message);
size_t sc2_apiprotocol__action_spatial_camera_move__get_packed_size
                     (const SC2APIProtocol__ActionSpatialCameraMove   *message);
size_t sc2_apiprotocol__action_spatial_camera_move__pack
                     (const SC2APIProtocol__ActionSpatialCameraMove   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__action_spatial_camera_move__pack_to_buffer
                     (const SC2APIProtocol__ActionSpatialCameraMove   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ActionSpatialCameraMove *
       sc2_apiprotocol__action_spatial_camera_move__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__action_spatial_camera_move__free_unpacked
                     (SC2APIProtocol__ActionSpatialCameraMove *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__ActionSpatialUnitSelectionPoint methods */
void   sc2_apiprotocol__action_spatial_unit_selection_point__init
                     (SC2APIProtocol__ActionSpatialUnitSelectionPoint         *message);
size_t sc2_apiprotocol__action_spatial_unit_selection_point__get_packed_size
                     (const SC2APIProtocol__ActionSpatialUnitSelectionPoint   *message);
size_t sc2_apiprotocol__action_spatial_unit_selection_point__pack
                     (const SC2APIProtocol__ActionSpatialUnitSelectionPoint   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__action_spatial_unit_selection_point__pack_to_buffer
                     (const SC2APIProtocol__ActionSpatialUnitSelectionPoint   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ActionSpatialUnitSelectionPoint *
       sc2_apiprotocol__action_spatial_unit_selection_point__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__action_spatial_unit_selection_point__free_unpacked
                     (SC2APIProtocol__ActionSpatialUnitSelectionPoint *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__ActionSpatialUnitSelectionRect methods */
void   sc2_apiprotocol__action_spatial_unit_selection_rect__init
                     (SC2APIProtocol__ActionSpatialUnitSelectionRect         *message);
size_t sc2_apiprotocol__action_spatial_unit_selection_rect__get_packed_size
                     (const SC2APIProtocol__ActionSpatialUnitSelectionRect   *message);
size_t sc2_apiprotocol__action_spatial_unit_selection_rect__pack
                     (const SC2APIProtocol__ActionSpatialUnitSelectionRect   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__action_spatial_unit_selection_rect__pack_to_buffer
                     (const SC2APIProtocol__ActionSpatialUnitSelectionRect   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ActionSpatialUnitSelectionRect *
       sc2_apiprotocol__action_spatial_unit_selection_rect__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__action_spatial_unit_selection_rect__free_unpacked
                     (SC2APIProtocol__ActionSpatialUnitSelectionRect *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*SC2APIProtocol__ObservationFeatureLayer_Closure)
                 (const SC2APIProtocol__ObservationFeatureLayer *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__FeatureLayers_Closure)
                 (const SC2APIProtocol__FeatureLayers *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__FeatureLayersMinimap_Closure)
                 (const SC2APIProtocol__FeatureLayersMinimap *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__ObservationRender_Closure)
                 (const SC2APIProtocol__ObservationRender *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__ActionSpatial_Closure)
                 (const SC2APIProtocol__ActionSpatial *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__ActionSpatialUnitCommand_Closure)
                 (const SC2APIProtocol__ActionSpatialUnitCommand *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__ActionSpatialCameraMove_Closure)
                 (const SC2APIProtocol__ActionSpatialCameraMove *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__ActionSpatialUnitSelectionPoint_Closure)
                 (const SC2APIProtocol__ActionSpatialUnitSelectionPoint *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__ActionSpatialUnitSelectionRect_Closure)
                 (const SC2APIProtocol__ActionSpatialUnitSelectionRect *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor sc2_apiprotocol__observation_feature_layer__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__feature_layers__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__feature_layers_minimap__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__observation_render__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__action_spatial__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__action_spatial_unit_command__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__action_spatial_camera_move__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__action_spatial_unit_selection_point__descriptor;
extern const ProtobufCEnumDescriptor    sc2_apiprotocol__action_spatial_unit_selection_point__type__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__action_spatial_unit_selection_rect__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_s2clientprotocol_2fspatial_2eproto__INCLUDED */
