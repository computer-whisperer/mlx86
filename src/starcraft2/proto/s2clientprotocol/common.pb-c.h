/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: s2clientprotocol/common.proto */

#ifndef PROTOBUF_C_s2clientprotocol_2fcommon_2eproto__INCLUDED
#define PROTOBUF_C_s2clientprotocol_2fcommon_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _SC2APIProtocol__AvailableAbility SC2APIProtocol__AvailableAbility;
typedef struct _SC2APIProtocol__ImageData SC2APIProtocol__ImageData;
typedef struct _SC2APIProtocol__PointI SC2APIProtocol__PointI;
typedef struct _SC2APIProtocol__RectangleI SC2APIProtocol__RectangleI;
typedef struct _SC2APIProtocol__Point2D SC2APIProtocol__Point2D;
typedef struct _SC2APIProtocol__Point SC2APIProtocol__Point;
typedef struct _SC2APIProtocol__Size2DI SC2APIProtocol__Size2DI;


/* --- enums --- */

typedef enum _SC2APIProtocol__Race {
  SC2_APIPROTOCOL__RACE__NoRace = 0,
  SC2_APIPROTOCOL__RACE__Terran = 1,
  SC2_APIPROTOCOL__RACE__Zerg = 2,
  SC2_APIPROTOCOL__RACE__Protoss = 3,
  SC2_APIPROTOCOL__RACE__Random = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SC2_APIPROTOCOL__RACE)
} SC2APIProtocol__Race;

/* --- messages --- */

struct  _SC2APIProtocol__AvailableAbility
{
  ProtobufCMessage base;
  protobuf_c_boolean has_ability_id;
  int32_t ability_id;
  protobuf_c_boolean has_requires_point;
  protobuf_c_boolean requires_point;
};
#define SC2_APIPROTOCOL__AVAILABLE_ABILITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__available_ability__descriptor) \
    , 0, 0, 0, 0 }


struct  _SC2APIProtocol__ImageData
{
  ProtobufCMessage base;
  /*
   * Number of bits per pixel; 8 bits for a byte etc.
   */
  protobuf_c_boolean has_bits_per_pixel;
  int32_t bits_per_pixel;
  /*
   * Dimension in pixels.
   */
  SC2APIProtocol__Size2DI *size;
  /*
   * Binary data; the size of this buffer in bytes is width * height * bits_per_pixel / 8.
   */
  protobuf_c_boolean has_data;
  ProtobufCBinaryData data;
};
#define SC2_APIPROTOCOL__IMAGE_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__image_data__descriptor) \
    , 0, 0, NULL, 0, {0,NULL} }


/*
 * Point on the screen/minimap (e.g., 0..64).
 * Note: bottom left of the screen is 0, 0.
 */
struct  _SC2APIProtocol__PointI
{
  ProtobufCMessage base;
  protobuf_c_boolean has_x;
  int32_t x;
  protobuf_c_boolean has_y;
  int32_t y;
};
#define SC2_APIPROTOCOL__POINT_I__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__point_i__descriptor) \
    , 0, 0, 0, 0 }


/*
 * Screen space rectangular area.
 */
struct  _SC2APIProtocol__RectangleI
{
  ProtobufCMessage base;
  SC2APIProtocol__PointI *p0;
  SC2APIProtocol__PointI *p1;
};
#define SC2_APIPROTOCOL__RECTANGLE_I__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__rectangle_i__descriptor) \
    , NULL, NULL }


/*
 * Point on the game board, 0..255.
 * Note: bottom left of the screen is 0, 0.
 */
struct  _SC2APIProtocol__Point2D
{
  ProtobufCMessage base;
  protobuf_c_boolean has_x;
  float x;
  protobuf_c_boolean has_y;
  float y;
};
#define SC2_APIPROTOCOL__POINT2_D__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__point2_d__descriptor) \
    , 0, 0, 0, 0 }


/*
 * Point on the game board, 0..255.
 * Note: bottom left of the screen is 0, 0.
 */
struct  _SC2APIProtocol__Point
{
  ProtobufCMessage base;
  protobuf_c_boolean has_x;
  float x;
  protobuf_c_boolean has_y;
  float y;
  protobuf_c_boolean has_z;
  float z;
};
#define SC2_APIPROTOCOL__POINT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__point__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


/*
 * Screen dimensions.
 */
struct  _SC2APIProtocol__Size2DI
{
  ProtobufCMessage base;
  protobuf_c_boolean has_x;
  int32_t x;
  protobuf_c_boolean has_y;
  int32_t y;
};
#define SC2_APIPROTOCOL__SIZE2_DI__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sc2_apiprotocol__size2_di__descriptor) \
    , 0, 0, 0, 0 }


/* SC2APIProtocol__AvailableAbility methods */
void   sc2_apiprotocol__available_ability__init
                     (SC2APIProtocol__AvailableAbility         *message);
size_t sc2_apiprotocol__available_ability__get_packed_size
                     (const SC2APIProtocol__AvailableAbility   *message);
size_t sc2_apiprotocol__available_ability__pack
                     (const SC2APIProtocol__AvailableAbility   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__available_ability__pack_to_buffer
                     (const SC2APIProtocol__AvailableAbility   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__AvailableAbility *
       sc2_apiprotocol__available_ability__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__available_ability__free_unpacked
                     (SC2APIProtocol__AvailableAbility *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__ImageData methods */
void   sc2_apiprotocol__image_data__init
                     (SC2APIProtocol__ImageData         *message);
size_t sc2_apiprotocol__image_data__get_packed_size
                     (const SC2APIProtocol__ImageData   *message);
size_t sc2_apiprotocol__image_data__pack
                     (const SC2APIProtocol__ImageData   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__image_data__pack_to_buffer
                     (const SC2APIProtocol__ImageData   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__ImageData *
       sc2_apiprotocol__image_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__image_data__free_unpacked
                     (SC2APIProtocol__ImageData *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__PointI methods */
void   sc2_apiprotocol__point_i__init
                     (SC2APIProtocol__PointI         *message);
size_t sc2_apiprotocol__point_i__get_packed_size
                     (const SC2APIProtocol__PointI   *message);
size_t sc2_apiprotocol__point_i__pack
                     (const SC2APIProtocol__PointI   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__point_i__pack_to_buffer
                     (const SC2APIProtocol__PointI   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__PointI *
       sc2_apiprotocol__point_i__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__point_i__free_unpacked
                     (SC2APIProtocol__PointI *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__RectangleI methods */
void   sc2_apiprotocol__rectangle_i__init
                     (SC2APIProtocol__RectangleI         *message);
size_t sc2_apiprotocol__rectangle_i__get_packed_size
                     (const SC2APIProtocol__RectangleI   *message);
size_t sc2_apiprotocol__rectangle_i__pack
                     (const SC2APIProtocol__RectangleI   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__rectangle_i__pack_to_buffer
                     (const SC2APIProtocol__RectangleI   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__RectangleI *
       sc2_apiprotocol__rectangle_i__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__rectangle_i__free_unpacked
                     (SC2APIProtocol__RectangleI *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__Point2D methods */
void   sc2_apiprotocol__point2_d__init
                     (SC2APIProtocol__Point2D         *message);
size_t sc2_apiprotocol__point2_d__get_packed_size
                     (const SC2APIProtocol__Point2D   *message);
size_t sc2_apiprotocol__point2_d__pack
                     (const SC2APIProtocol__Point2D   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__point2_d__pack_to_buffer
                     (const SC2APIProtocol__Point2D   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__Point2D *
       sc2_apiprotocol__point2_d__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__point2_d__free_unpacked
                     (SC2APIProtocol__Point2D *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__Point methods */
void   sc2_apiprotocol__point__init
                     (SC2APIProtocol__Point         *message);
size_t sc2_apiprotocol__point__get_packed_size
                     (const SC2APIProtocol__Point   *message);
size_t sc2_apiprotocol__point__pack
                     (const SC2APIProtocol__Point   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__point__pack_to_buffer
                     (const SC2APIProtocol__Point   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__Point *
       sc2_apiprotocol__point__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__point__free_unpacked
                     (SC2APIProtocol__Point *message,
                      ProtobufCAllocator *allocator);
/* SC2APIProtocol__Size2DI methods */
void   sc2_apiprotocol__size2_di__init
                     (SC2APIProtocol__Size2DI         *message);
size_t sc2_apiprotocol__size2_di__get_packed_size
                     (const SC2APIProtocol__Size2DI   *message);
size_t sc2_apiprotocol__size2_di__pack
                     (const SC2APIProtocol__Size2DI   *message,
                      uint8_t             *out);
size_t sc2_apiprotocol__size2_di__pack_to_buffer
                     (const SC2APIProtocol__Size2DI   *message,
                      ProtobufCBuffer     *buffer);
SC2APIProtocol__Size2DI *
       sc2_apiprotocol__size2_di__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sc2_apiprotocol__size2_di__free_unpacked
                     (SC2APIProtocol__Size2DI *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*SC2APIProtocol__AvailableAbility_Closure)
                 (const SC2APIProtocol__AvailableAbility *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__ImageData_Closure)
                 (const SC2APIProtocol__ImageData *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__PointI_Closure)
                 (const SC2APIProtocol__PointI *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__RectangleI_Closure)
                 (const SC2APIProtocol__RectangleI *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__Point2D_Closure)
                 (const SC2APIProtocol__Point2D *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__Point_Closure)
                 (const SC2APIProtocol__Point *message,
                  void *closure_data);
typedef void (*SC2APIProtocol__Size2DI_Closure)
                 (const SC2APIProtocol__Size2DI *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    sc2_apiprotocol__race__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__available_ability__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__image_data__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__point_i__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__rectangle_i__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__point2_d__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__point__descriptor;
extern const ProtobufCMessageDescriptor sc2_apiprotocol__size2_di__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_s2clientprotocol_2fcommon_2eproto__INCLUDED */
